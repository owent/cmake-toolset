diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0f0c47a..79aad58 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -87,6 +87,9 @@ set_property(CACHE gRPC_PROTOBUF_PROVIDER PROPERTY STRINGS "module" "package")
 set(gRPC_PROTOBUF_PACKAGE_TYPE "" CACHE STRING "Algorithm for searching protobuf package")
 set_property(CACHE gRPC_PROTOBUF_PACKAGE_TYPE PROPERTY STRINGS "CONFIG" "MODULE")
 
+set(gRPC_UPB_PROVIDER "module" CACHE STRING "Provider of upb library")
+set_property(CACHE gRPC_UPB_PROVIDER PROPERTY STRINGS "module" "package")
+
 if(gRPC_BUILD_TESTS)
   set(gRPC_GFLAGS_PROVIDER "module" CACHE STRING "Provider of gflags library")
   set_property(CACHE gRPC_GFLAGS_PROVIDER PROPERTY STRINGS "module" "package")
@@ -1346,6 +1349,7 @@ target_link_libraries(gpr
   absl::str_format
   absl::memory
   absl::base
+  ${_gRPC_UPB_LIBRARIES}
 )
 if(_gRPC_PLATFORM_ANDROID)
   target_link_libraries(gpr
@@ -1894,7 +1898,6 @@ target_link_libraries(grpc
   ${_gRPC_ALLTARGETS_LIBRARIES}
   gpr
   address_sorting
-  upb
   absl::optional
   absl::strings
   absl::status
@@ -1976,7 +1979,6 @@ target_link_libraries(grpc_csharp_ext
   grpc
   gpr
   address_sorting
-  upb
 )
 
 
@@ -2041,7 +2043,6 @@ target_link_libraries(grpc_test_util
   grpc
   gpr
   address_sorting
-  upb
   absl::symbolize
   absl::stacktrace
   absl::failure_signal_handler
@@ -2446,7 +2447,6 @@ target_link_libraries(grpc_unsecure
   ${_gRPC_ALLTARGETS_LIBRARIES}
   gpr
   address_sorting
-  upb
   absl::optional
   absl::strings
   absl::status
@@ -2644,7 +2644,6 @@ target_link_libraries(grpc++
   grpc
   gpr
   address_sorting
-  upb
 )
 
 foreach(_hdr
@@ -2890,7 +2889,6 @@ target_link_libraries(grpc++_alts
   grpc
   gpr
   address_sorting
-  upb
 )
 
 foreach(_hdr
@@ -2959,7 +2957,6 @@ target_link_libraries(grpc++_error_details
   grpc
   gpr
   address_sorting
-  upb
 )
 
 foreach(_hdr
@@ -3032,7 +3029,6 @@ target_link_libraries(grpc++_reflection
   grpc
   gpr
   address_sorting
-  upb
 )
 
 foreach(_hdr
@@ -3104,7 +3100,6 @@ target_link_libraries(grpc++_test
   grpc
   gpr
   address_sorting
-  upb
   ${_gRPC_GFLAGS_LIBRARIES}
 )
 
@@ -3313,7 +3308,6 @@ target_link_libraries(grpc++_unsecure
   grpc_unsecure
   gpr
   address_sorting
-  upb
 )
 
 foreach(_hdr
@@ -3631,7 +3625,6 @@ target_link_libraries(grpcpp_channelz
   grpc
   gpr
   address_sorting
-  upb
 )
 
 foreach(_hdr
@@ -3658,6 +3651,7 @@ endif()
 
 endif()
 
+if (gRPC_UPB_PROVIDER STREQUAL "module")
 add_library(upb
   third_party/upb/upb/decode.c
   third_party/upb/upb/encode.c
@@ -3666,6 +3660,7 @@ add_library(upb
   third_party/upb/upb/table.c
   third_party/upb/upb/upb.c
 )
+set_target_properties(upb PROPERTIES OUTPUT_NAME "grpc_upb")
 
 set_target_properties(upb PROPERTIES
   VERSION ${gRPC_CORE_VERSION}
@@ -3709,7 +3704,7 @@ if(gRPC_INSTALL)
   )
 endif()
 
-
+endif()
 
 add_executable(check_epollexclusive
   test/build/check_epollexclusive.c
diff --git a/cmake/gRPCConfig.cmake.in b/cmake/gRPCConfig.cmake.in
index 3623f4a..df6ced5 100644
--- a/cmake/gRPCConfig.cmake.in
+++ b/cmake/gRPCConfig.cmake.in
@@ -8,6 +8,7 @@ list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/modules)
 @_gRPC_FIND_CARES@
 @_gRPC_FIND_ABSL@
 @_gRPC_FIND_RE2@
+@_gRPC_FIND_UPB@
 
 # Targets
 include(${CMAKE_CURRENT_LIST_DIR}/gRPCTargets.cmake)
diff --git a/cmake/upb.cmake b/cmake/upb.cmake
index f2a0e50..bab661a 100644
--- a/cmake/upb.cmake
+++ b/cmake/upb.cmake
@@ -12,9 +12,17 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+set(_gRPC_UPB_GRPC_GENERATED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/core/ext/upb-generated" "${CMAKE_CURRENT_SOURCE_DIR}/src/core/ext/upbdefs-generated")
+if (gRPC_UPB_PROVIDER STREQUAL "module")
 set(UPB_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party/upb)
 
 set(_gRPC_UPB_INCLUDE_DIR "${UPB_ROOT_DIR}")
 set(_gRPC_UPB_GRPC_GENERATED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/core/ext/upb-generated" "${CMAKE_CURRENT_SOURCE_DIR}/src/core/ext/upbdefs-generated")
 
 set(_gRPC_UPB_LIBRARIES upb)
+elseif(gRPC_UPB_PROVIDER STREQUAL "package")
+    find_package(upb CONFIG REQUIRED)
+    set(_gRPC_UPB_LIBRARIES upb::fastdecode upb::json upb::upb upb::utf8_range upb::textformat upb::reflection upb::descriptor_upb_proto)
+    set(_gRPC_UPB_INCLUDE_DIR)
+    set(_gRPC_FIND_UPB "if(NOT upb_FOUND)\n  find_package(upb CONFIG REQUIRED)\nendif()")
+endif()
