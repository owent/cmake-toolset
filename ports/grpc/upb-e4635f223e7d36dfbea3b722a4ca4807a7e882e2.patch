diff --git a/cmake/make_cmakelists.py b/cmake/make_cmakelists.py
index d64c14f..a5ca35b 100755
--- a/cmake/make_cmakelists.py
+++ b/cmake/make_cmakelists.py
@@ -39,8 +39,13 @@ import sys
 import textwrap
 import os
 
+def MappingThirdPartyDep(dep):
+  if dep.startswith("/third_party/"):
+    return dep[13:]
+  return dep
+
 def StripFirstChar(deps):
-  return [dep[1:] for dep in deps]
+  return [MappingThirdPartyDep(dep[1:]) for dep in deps]
 
 def IsSourceFile(name):
   return name.endswith(".c") or name.endswith(".cc")
@@ -85,6 +90,7 @@ class BuildFileFunctions(object):
           kwargs["name"],
           "\n  ".join(found_files)
       )
+      self.converter.export_targets.append(kwargs["name"])
       self._add_deps(kwargs)
     else:
       # Header-only library, have to do a couple things differently.
@@ -93,6 +99,7 @@ class BuildFileFunctions(object):
       self.converter.toplevel += "add_library(%s INTERFACE)\n" % (
           kwargs["name"]
       )
+      self.converter.export_targets.append(kwargs["name"])
       self._add_deps(kwargs, " INTERFACE")
 
   def cc_binary(self, **kwargs):
@@ -249,11 +256,13 @@ class Converter(object):
     self.prelude = ""
     self.toplevel = ""
     self.if_lua = ""
+    self.export_targets = []
 
   def convert(self):
     return self.template % {
         "prelude": converter.prelude,
         "toplevel": converter.toplevel,
+        "export_targets": ' '.join(converter.export_targets),
     }
 
   template = textwrap.dedent("""\
@@ -316,10 +325,131 @@ class Converter(object):
       set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--build-id")
     endif()
 
+    if (MSVC)
+      add_compile_options(/wd4146 /wd4703 -D_CRT_SECURE_NO_WARNINGS)
+    endif()
+
     enable_testing()
 
+    if (UPB_BUILD_CODEGEN)
+      find_package(absl CONFIG REQUIRED)
+      find_package(protobuf CONFIG REQUIRED)
+    endif()
+
+    add_library(descriptor_upb_proto)
+
+    add_library(utf8_range
+      ../third_party/utf8_range/naive.c
+      ../third_party/utf8_range/range2-neon.c
+      ../third_party/utf8_range/range2-sse.c
+      ../third_party/utf8_range/utf8_range.h
+    )
+
     %(toplevel)s
 
+    set(UPB_DESCRIPTOR_PROTO "${UPB_HOST_INCLUDE_DIR}/google/protobuf/descriptor.proto")
+    if (UPB_BUILD_CODEGEN)
+      set(UPB_CODEGEN_TARGETS protoc-gen-upb protoc-gen-upbdefs protoc-gen-lua)
+
+      add_executable(protoc-gen-upbdefs
+        ../upbc/common.h
+        ../upbc/common.cc
+        ../upbc/protoc-gen-upbdefs.cc
+      )
+      target_link_libraries(protoc-gen-upbdefs PRIVATE
+        absl::flat_hash_map
+        absl::strings
+        protobuf::libprotobuf
+        protobuf::libprotoc
+      )
+
+      add_executable(protoc-gen-upb
+        ../upbc/common.h
+        ../upbc/common.cc
+        ../upbc/protoc-gen-upb.cc
+      )
+      target_link_libraries(protoc-gen-upb PRIVATE
+        mini_table
+        port
+        upb
+        absl::flat_hash_map
+        absl::flat_hash_set
+        absl::strings
+        protobuf::libprotobuf
+        protobuf::libprotoc
+      )
+
+      add_executable(protoc-gen-lua
+        ../upb/bindings/lua/upbc.cc
+      )
+      target_link_libraries(protoc-gen-lua PRIVATE
+        absl::strings
+        protobuf::libprotobuf
+        protobuf::libprotoc
+      )
+
+      set(PROTOC_PROGRAM "\$<TARGET_FILE:protobuf::protoc>")
+      set(PROTOC_GEN_UPB_PROGRAM "\$<TARGET_FILE:protoc-gen-upb>")
+      set(PROTOC_GEN_UPBDEFS_PROGRAM "\$<TARGET_FILE:protoc-gen-upbdefs>")
+    else()
+      find_program(PROTOC_PROGRAM protoc)
+      find_program(PROTOC_GEN_UPB_PROGRAM protoc-gen-upb)
+      find_program(PROTOC_GEN_UPBDEFS_PROGRAM protoc-gen-upbdefs)
+    endif()
+
+    set(UPB_DESCRIPTOR_SOURCES 
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upb.h" 
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upb.c"
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upbdefs.h"
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upbdefs.c"
+    )
+
+    add_custom_command(
+      OUTPUT ${UPB_DESCRIPTOR_SOURCES}
+      DEPENDS "${UPB_DESCRIPTOR_PROTO}"
+      COMMAND
+        "${PROTOC_PROGRAM}"
+        "-I${UPB_HOST_INCLUDE_DIR}"
+        "--plugin=protoc-gen-upb=${PROTOC_GEN_UPB_PROGRAM}"
+        "--plugin=protoc-gen-upbdefs=${PROTOC_GEN_UPBDEFS_PROGRAM}"
+        "--upb_out=${CMAKE_CURRENT_BINARY_DIR}"
+        "--upbdefs_out=${CMAKE_CURRENT_BINARY_DIR}"
+        "${UPB_DESCRIPTOR_PROTO}"
+    )
+
+    target_sources(descriptor_upb_proto PRIVATE ${UPB_DESCRIPTOR_SOURCES})
+
+    set_target_properties(reflection PROPERTIES OUTPUT_NAME upb_reflection)
+    set_target_properties(fastdecode PROPERTIES OUTPUT_NAME upb_fastdecode)
+    set_target_properties(textformat PROPERTIES OUTPUT_NAME upb_textformat)
+    set_target_properties(json PROPERTIES OUTPUT_NAME upb_json)
+    set_target_properties(utf8_range PROPERTIES OUTPUT_NAME upb_utf8_range)
+    set_target_properties(mini_table PROPERTIES OUTPUT_NAME upb_mini_table)
+
+    include(GNUInstallDirs)
+    install(
+      DIRECTORY ../upb
+      DESTINATION include
+      FILES_MATCHING
+      PATTERN "*.h"
+      PATTERN "*.hpp"
+      PATTERN "*.inc"
+      PATTERN "*.int.h"
+    )
+    install(
+      DIRECTORY ../upb/bindings/lua/
+      DESTINATION share/upb/upb/bindings/lua
+    )
+    target_include_directories(upb PUBLIC $<INSTALL_INTERFACE:include>)
+    install(TARGETS
+      descriptor_upb_proto
+      utf8_range
+      %(export_targets)s
+      ${UPB_CODEGEN_TARGETS}
+      EXPORT upb-config
+    )
+    install(EXPORT upb-config NAMESPACE upb:: DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/upb")
+
   """)
 
 data = {}
