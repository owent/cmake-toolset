diff --git a/CMakeLists.txt b/CMakeLists.txt
index 303738d..7fcaa31 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,7 +22,7 @@
 
 
 
-cmake_minimum_required(VERSION 3.5.1)
+cmake_minimum_required(VERSION 3.16)
 
 set(PACKAGE_NAME          "grpc")
 set(PACKAGE_VERSION       "1.43.2")
diff --git a/src/core/ext/filters/client_channel/lb_policy/xds/xds_cluster_resolver.cc b/src/core/ext/filters/client_channel/lb_policy/xds/xds_cluster_resolver.cc
index 4aa11fd..cefb69a 100644
--- a/src/core/ext/filters/client_channel/lb_policy/xds/xds_cluster_resolver.cc
+++ b/src/core/ext/filters/client_channel/lb_policy/xds/xds_cluster_resolver.cc
@@ -139,7 +139,7 @@ class XdsClusterResolverLb : public LoadBalancingPolicy {
     // to use for LRS load reporting. Caller must ensure that config_ is set
     // before calling.
     std::pair<absl::string_view, absl::string_view> GetLrsClusterKey() const {
-      if (!parent_->is_xds_uri_) return {parent_->server_name_, nullptr};
+      if (!parent_->is_xds_uri_) return {parent_->server_name_, absl::string_view{}};
       return {
           parent_->config_->discovery_mechanisms()[index_].cluster_name,
           parent_->config_->discovery_mechanisms()[index_].eds_service_name};
diff --git a/third_party/upb/cmake/make_cmakelists.py b/third_party/upb/cmake/make_cmakelists.py
index dea4397..98f36de 100755
--- a/third_party/upb/cmake/make_cmakelists.py
+++ b/third_party/upb/cmake/make_cmakelists.py
@@ -38,8 +38,13 @@ import sys
 import textwrap
 import os
 
+def MappingThirdPartyDep(dep):
+  if dep.startswith("/third_party/"):
+    return dep[13:]
+  return dep
+
 def StripColons(deps):
-  return map(lambda x: x[1:], deps)
+  return map(lambda x: MappingThirdPartyDep(x[1:]), deps)
 
 def IsSourceFile(name):
   return name.endswith(".c") or name.endswith(".cc")
@@ -79,10 +84,15 @@ class BuildFileFunctions(object):
 
     if list(filter(IsSourceFile, files)):
       # Has sources, make this a normal library.
-      self.converter.toplevel += "add_library(%s\n  %s)\n" % (
-          kwargs["name"],
-          "\n  ".join(found_files)
+      output_name = kwargs["name"]
+      if output_name.lower() != "upb":
+        output_name = "upb-" + output_name
+      self.converter.toplevel += "add_library({0}\n  {1})\nset_target_properties({0} PROPERTIES OUTPUT_NAME \"{2}\")\n".format(
+        kwargs["name"],
+        "\n  ".join(found_files),
+        output_name
       )
+      self.converter.export_targets.append(kwargs["name"])
       self._add_deps(kwargs)
     else:
       # Header-only library, have to do a couple things differently.
@@ -91,6 +101,7 @@ class BuildFileFunctions(object):
       self.converter.toplevel += "add_library(%s INTERFACE)\n" % (
           kwargs["name"]
       )
+      self.converter.export_targets.append(kwargs["name"])
       self._add_deps(kwargs, " INTERFACE")
 
   def cc_binary(self, **kwargs):
@@ -229,11 +240,13 @@ class Converter(object):
     self.prelude = ""
     self.toplevel = ""
     self.if_lua = ""
+    self.export_targets = []
 
   def convert(self):
     return self.template % {
         "prelude": converter.prelude,
         "toplevel": converter.toplevel,
+        "export_targets": ' '.join(converter.export_targets),
     }
 
   template = textwrap.dedent("""\
@@ -263,6 +276,15 @@ class Converter(object):
           "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."
           FORCE)
     endif()
+    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH YES)
+    set(CMAKE_BUILD_RPATH_USE_ORIGIN YES)
+    if (UNIX AND NOT APPLE)
+      set(CMAKE_INSTALL_RPATH "$ORIGIN" "$ORIGIN/../lib64" "$ORIGIN/../lib")
+      set(CMAKE_BUILD_RPATH  "$ORIGIN" "$ORIGIN/../lib64" "$ORIGIN/../lib")
+    elseif (APPLE)
+      set(CMAKE_INSTALL_RPATH "@loader_path" "@loader_path/../lib64" "@loader_path/../lib")
+      set(CMAKE_BUILD_RPATH  "@loader_path" "@loader_path/../lib64" "@loader_path/../lib")
+    endif()
 
     # When using Ninja, compiler output won't be colorized without this.
     include(CheckCXXCompilerFlag)
@@ -295,11 +317,158 @@ class Converter(object):
     elseif(UNIX)
       set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--build-id")
     endif()
+    if (MSVC)
+      add_compile_options(/wd4146 /wd4703 -D_CRT_SECURE_NO_WARNINGS)
+    endif()
 
     enable_testing()
 
+    if (UPB_BUILD_CODEGEN)
+      find_package(absl CONFIG REQUIRED)
+      find_package(protobuf CONFIG REQUIRED)
+    endif()
+
+    add_library(descriptor_upb_proto)
+    set_target_properties(descriptor_upb_proto PROPERTIES OUTPUT_NAME "upb-descriptor_upb_proto")
+
     %(toplevel)s
 
+    set(UPB_DESCRIPTOR_PROTO "${UPB_HOST_INCLUDE_DIR}/google/protobuf/descriptor.proto")
+    if (UPB_BUILD_CODEGEN)
+      set(UPB_CODEGEN_TARGETS protoc-gen-upb protoc-gen-upbdefs protoc-gen-lua)
+
+      add_executable(protoc-gen-upbdefs
+        ../upbc/common.h
+        ../upbc/common.cc
+        ../upbc/protoc-gen-upbdefs.cc
+      )
+      target_link_libraries(protoc-gen-upbdefs PRIVATE
+        absl::flat_hash_map
+        absl::strings
+        protobuf::libprotobuf
+        protobuf::libprotoc
+      )
+
+      add_executable(protoc-gen-upb
+        ../upbc/common.h
+        ../upbc/common.cc
+        ../upbc/protoc-gen-upb.cc
+      )
+      target_link_libraries(protoc-gen-upb PRIVATE
+        port
+        upb
+        absl::flat_hash_map
+        absl::flat_hash_set
+        absl::strings
+        protobuf::libprotobuf
+        protobuf::libprotoc
+      )
+
+      add_executable(protoc-gen-lua
+        ../upb/bindings/lua/upbc.cc
+      )
+      target_link_libraries(protoc-gen-lua PRIVATE
+        absl::strings
+        protobuf::libprotobuf
+        protobuf::libprotoc
+      )
+
+      set(PROTOC_PROGRAM "\$<TARGET_FILE:protobuf::protoc>")
+      set(PROTOC_GEN_UPB_PROGRAM "\$<TARGET_FILE:protoc-gen-upb>")
+      set(PROTOC_GEN_UPBDEFS_PROGRAM "\$<TARGET_FILE:protoc-gen-upbdefs>")
+      set(PROTOC_GEN_UPBLUA_PROGRAM "\$<TARGET_FILE:protoc-gen-lua>")
+    else()
+      find_program(PROTOC_PROGRAM protoc)
+      find_program(PROTOC_GEN_UPB_PROGRAM protoc-gen-upb)
+      find_program(PROTOC_GEN_UPBDEFS_PROGRAM protoc-gen-upbdefs)
+      find_program(PROTOC_GEN_UPBLUA_PROGRAM protoc-gen-lua)
+    endif()
+
+    set(UPB_DESCRIPTOR_SOURCES 
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upb.h" 
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upb.c"
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upbdefs.h"
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upbdefs.c"
+    )
+
+    unset(UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_LUAS)
+    unset(UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_HEADERS)
+    unset(UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_SOURCES)
+    unset(UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_FILES)
+    set(UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_NAMES any api duration empty
+        field_mask source_context struct timestamp type wrappers)
+    foreach(PROTO_NAME IN LISTS UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_NAMES)
+      list(APPEND UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_FILES
+            "${UPB_HOST_INCLUDE_DIR}/google/protobuf/${PROTO_NAME}.proto")
+      list(APPEND UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_LUAS
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/${PROTO_NAME}_pb.lua")
+      list(APPEND UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_HEADERS
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/${PROTO_NAME}.upb.h"
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/${PROTO_NAME}.upbdefs.h")
+      list(APPEND UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_SOURCES
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/${PROTO_NAME}.upb.c"
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/${PROTO_NAME}.upbdefs.c")
+    endforeach()
+
+    add_custom_command(
+      OUTPUT ${UPB_DESCRIPTOR_SOURCES}
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor_pb.lua"
+            ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_LUAS}
+            ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_HEADERS}
+            ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_SOURCES}
+      DEPENDS "${UPB_DESCRIPTOR_PROTO}" ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_FILES}
+      COMMAND
+        "${PROTOC_PROGRAM}"
+        "-I${UPB_HOST_INCLUDE_DIR}"
+        "--plugin=protoc-gen-upb=${PROTOC_GEN_UPB_PROGRAM}"
+        "--plugin=protoc-gen-upbdefs=${PROTOC_GEN_UPBDEFS_PROGRAM}"
+        "--plugin=protoc-gen-lua=${PROTOC_GEN_UPBLUA_PROGRAM}"
+        "--upb_out=${CMAKE_CURRENT_BINARY_DIR}"
+        "--upbdefs_out=${CMAKE_CURRENT_BINARY_DIR}"
+        "--lua_out=${CMAKE_CURRENT_BINARY_DIR}"
+        "${UPB_DESCRIPTOR_PROTO}" ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_FILES}
+    )
+
+    target_sources(descriptor_upb_proto PRIVATE ${UPB_DESCRIPTOR_SOURCES})
+    target_link_libraries(descriptor_upb_proto PRIVATE upb)
+
+    add_library(well_known_types ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_HEADERS}
+      ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_SOURCES})
+    set_target_properties(well_known_types PROPERTIES OUTPUT_NAME "upb-well_known_types")
+    target_link_libraries(well_known_types PRIVATE upb)
+
+    include(GNUInstallDirs)
+    install(
+      DIRECTORY ../upb
+      DESTINATION include
+      FILES_MATCHING
+      PATTERN "*.h"
+      PATTERN "*.hpp"
+      PATTERN "*.inc"
+      PATTERN "*.int.h"
+    )
+    install(
+      FILES
+        "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upb.h"
+        "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upbdefs.h"
+        "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor_pb.lua"
+        ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_LUAS}
+        ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_HEADERS}
+      DESTINATION include/google/protobuf
+    )
+    install(
+      DIRECTORY ../upb/bindings/lua/
+      DESTINATION share/upb/upb/bindings/lua
+    )
+    target_include_directories(upb PUBLIC $<INSTALL_INTERFACE:include>)
+    install(TARGETS
+      descriptor_upb_proto
+      well_known_types
+      %(export_targets)s
+      ${UPB_CODEGEN_TARGETS}
+      EXPORT upb-config
+    )
+    install(EXPORT upb-config NAMESPACE upb:: DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/upb")
   """)
 
 data = {}
diff --git a/third_party/upb/upb/bindings/lua/def.c b/third_party/upb/upb/bindings/lua/def.c
index a481e9a..336a61b 100644
--- a/third_party/upb/upb/bindings/lua/def.c
+++ b/third_party/upb/upb/bindings/lua/def.c
@@ -674,7 +674,7 @@ const upb_filedef *lupb_filedef_check(lua_State *L, int narg) {
 
 static int lupb_filedef_dep(lua_State *L) {
   const upb_filedef *f = lupb_filedef_check(L, 1);
-  int index = luaL_checkint(L, 2);
+  int index = luaL_checkinteger(L, 2);
   const upb_filedef *dep = upb_filedef_dep(f, index);
   lupb_wrapper_pushwrapper(L, 1, dep, LUPB_FILEDEF);
   return 1;
@@ -688,7 +688,7 @@ static int lupb_filedef_depcount(lua_State *L) {
 
 static int lupb_filedef_enum(lua_State *L) {
   const upb_filedef *f = lupb_filedef_check(L, 1);
-  int index = luaL_checkint(L, 2);
+  int index = luaL_checkinteger(L, 2);
   const upb_enumdef *e = upb_filedef_enum(f, index);
   lupb_wrapper_pushwrapper(L, 1, e, LUPB_ENUMDEF);
   return 1;
@@ -702,7 +702,7 @@ static int lupb_filedef_enumcount(lua_State *L) {
 
 static int lupb_filedef_msg(lua_State *L) {
   const upb_filedef *f = lupb_filedef_check(L, 1);
-  int index = luaL_checkint(L, 2);
+  int index = luaL_checkinteger(L, 2);
   const upb_msgdef *m = upb_filedef_msg(f, index);
   lupb_wrapper_pushwrapper(L, 1, m, LUPB_MSGDEF);
   return 1;
diff --git a/third_party/upb/upb/bindings/lua/upb.c b/third_party/upb/upb/bindings/lua/upb.c
index c9d98bb..b1f9b86 100644
--- a/third_party/upb/upb/bindings/lua/upb.c
+++ b/third_party/upb/upb/bindings/lua/upb.c
@@ -60,12 +60,13 @@
 /* Lua compatibility code *****************************************************/
 
 /* Shims for upcoming Lua 5.3 functionality. */
+#if LUA_VERSION_NUM < 503
 static bool lua_isinteger(lua_State *L, int argn) {
   LUPB_UNUSED(L);
   LUPB_UNUSED(argn);
   return false;
 }
-
+#endif
 
 /* Utility functions **********************************************************/
 
diff --git a/third_party/upb/upb/bindings/lua/upbc.cc b/third_party/upb/upb/bindings/lua/upbc.cc
index e2bb0dd..527863a 100644
--- a/third_party/upb/upb/bindings/lua/upbc.cc
+++ b/third_party/upb/upb/bindings/lua/upbc.cc
@@ -80,7 +80,7 @@ static void PrintString(int max_cols, absl::string_view* str,
     } else if (ch == '\'') {
       printer->PrintRaw("\\'");
       max_cols--;
-    } else if (isprint(ch)) {
+    } else if (isprint(static_cast<int>(static_cast<unsigned char>(ch)))) {
       printer->WriteRaw(&ch, 1);
       max_cols--;
     } else {
diff --git a/third_party/upb/upb/text_encode.c b/third_party/upb/upb/text_encode.c
index 12840c0..39ce223 100644
--- a/third_party/upb/upb/text_encode.c
+++ b/third_party/upb/upb/text_encode.c
@@ -273,7 +273,7 @@ static void txtenc_map(txtenc *e, const upb_map *map, const upb_fielddef *f) {
   }
 }
 
-#define CHK(x) do { if (!(x)) { return false; } } while(0)
+#define CHK(x) do { if (!(x)) { return NULL; } } while(0)
 
 static const char *txtenc_parsevarint(const char *ptr, const char *limit,
                                       uint64_t *val) {
