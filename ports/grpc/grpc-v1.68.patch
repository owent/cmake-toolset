diff --git a/src/core/util/per_cpu.h b/src/core/util/per_cpu.h
index 69648aa..5094ccd 100644
--- a/src/core/util/per_cpu.h
+++ b/src/core/util/per_cpu.h
@@ -82,7 +82,7 @@ class PerCpu {
  public:
   // Options are not defaulted to try and force consideration of what the
   // options specify.
-  explicit PerCpu(PerCpuOptions options) : shards_(options.Shards()) {}
+  explicit PerCpu(PerCpuOptions options) : shards_(options.Shards()), data_{new T[options.Shards()]} {}
 
   T& this_cpu() { return data_[sharding_helper_.GetShardingBits() % shards_]; }
 
@@ -94,7 +94,7 @@ class PerCpu {
  private:
   PerCpuShardingHelper sharding_helper_;
   const size_t shards_;
-  std::unique_ptr<T[]> data_{new T[shards_]};
+  std::unique_ptr<T[]> data_;
 };
 
 }  // namespace grpc_core
diff --git a/third_party/upb/upb/message/copy.c b/third_party/upb/upb/message/copy.c
index 67e1b5b..94f4105 100644
--- a/third_party/upb/upb/message/copy.c
+++ b/third_party/upb/upb/message/copy.c
@@ -150,7 +150,7 @@ upb_Array* upb_Array_DeepClone(const upb_Array* array, upb_CType value_type,
   for (size_t i = 0; i < size; ++i) {
     upb_MessageValue val = upb_Array_Get(array, i);
     if (!upb_Clone_MessageValue(&val, value_type, sub, arena)) {
-      return false;
+      return NULL;
     }
     upb_Array_Set(cloned_array, i, val);
   }
diff --git a/third_party/upb/upb/message/internal/message.c b/third_party/upb/upb/message/internal/message.c
index 57ab2d7..45b1067 100644
--- a/third_party/upb/upb/message/internal/message.c
+++ b/third_party/upb/upb/message/internal/message.c
@@ -17,9 +17,35 @@
 // Must be last.
 #include "upb/port/def.inc"
 
-const float kUpb_FltInfinity = INFINITY;
-const double kUpb_Infinity = INFINITY;
-const double kUpb_NaN = NAN;
+// The latest win32 SDKs have an invalid definition of NAN.
+// https://developercommunity.visualstudio.com/t/NAN-is-no-longer-compile-time-constant-i/10688907
+//
+// Unfortunately, the `0.0 / 0.0` workaround doesn't work in Clang under C23, so
+// try __builtin_nan first, if that exists.
+#ifdef _WIN32
+#ifdef __has_builtin
+#if __has_builtin(__builtin_nan)
+#define UPB_NAN __builtin_nan("0")
+#endif
+#if __has_builtin(__builtin_inf)
+#define UPB_INFINITY __builtin_inf()
+#endif
+#endif
+#ifndef UPB_NAN
+#define UPB_NAN 0.0 / 0.0
+#endif
+#ifndef UPB_INFINITY
+#define UPB_INFINITY 1.0 / 0.0
+#endif
+#else
+// For !_WIN32, assume math.h works.
+#define UPB_NAN NAN
+#define UPB_INFINITY INFINITY
+#endif
+
+const float kUpb_FltInfinity = UPB_INFINITY;
+const double kUpb_Infinity = UPB_INFINITY;
+const double kUpb_NaN = UPB_NAN;
 
 bool UPB_PRIVATE(_upb_Message_Realloc)(struct upb_Message* msg, size_t need,
                                        upb_Arena* a) {
diff --git a/third_party/upb/upb/text/internal/encode.c b/third_party/upb/upb/text/internal/encode.c
index fc9cc6f..c58c2de 100644
--- a/third_party/upb/upb/text/internal/encode.c
+++ b/third_party/upb/upb/text/internal/encode.c
@@ -25,7 +25,7 @@
 #define CHK(x)      \
   do {              \
     if (!(x)) {     \
-      return false; \
+      return NULL;  \
     }               \
   } while (0)
 
diff --git a/third_party/upb/upb/wire/internal/decoder.h b/third_party/upb/upb/wire/internal/decoder.h
index 5ca1e1b..ea3eb2c 100644
--- a/third_party/upb/upb/wire/internal/decoder.h
+++ b/third_party/upb/upb/wire/internal/decoder.h
@@ -17,7 +17,7 @@
 #include "upb/message/internal/message.h"
 #include "upb/wire/decode.h"
 #include "upb/wire/eps_copy_input_stream.h"
-#include "utf8_range.h"
+#include "../utf8_range/utf8_range.h"
 
 // Must be last.
 #include "upb/port/def.inc"
