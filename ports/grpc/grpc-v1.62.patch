diff --git a/src/core/lib/gprpp/per_cpu.h b/src/core/lib/gprpp/per_cpu.h
index 92eed5e..f630fc0 100644
--- a/src/core/lib/gprpp/per_cpu.h
+++ b/src/core/lib/gprpp/per_cpu.h
@@ -84,7 +84,7 @@ class PerCpu {
  public:
   // Options are not defaulted to try and force consideration of what the
   // options specify.
-  explicit PerCpu(PerCpuOptions options) : shards_(options.Shards()) {}
+  explicit PerCpu(PerCpuOptions options) : shards_(options.Shards()), data_{new T[options.Shards()]} {}
 
   T& this_cpu() { return data_[sharding_helper_.GetShardingBits() % shards_]; }
 
@@ -96,7 +96,7 @@ class PerCpu {
  private:
   PerCpuShardingHelper sharding_helper_;
   const size_t shards_;
-  std::unique_ptr<T[]> data_{new T[shards_]};
+  std::unique_ptr<T[]> data_;
 };
 
 }  // namespace grpc_core
diff --git a/src/core/lib/promise/detail/promise_like.h b/src/core/lib/promise/detail/promise_like.h
index 395c325..4649afd 100644
--- a/src/core/lib/promise/detail/promise_like.h
+++ b/src/core/lib/promise/detail/promise_like.h
@@ -71,7 +71,7 @@ class PromiseLike<void>;
 
 template <typename F>
 class PromiseLike<F, absl::enable_if_t<!std::is_void<
-                         typename std::result_of<F()>::type>::value>> {
+                         absl::result_of_t<F()> >::value>> {
  private:
   GPR_NO_UNIQUE_ADDRESS F f_;
 
diff --git a/src/core/lib/surface/server.cc b/src/core/lib/surface/server.cc
index 1b67f69..592bf19 100644
--- a/src/core/lib/surface/server.cc
+++ b/src/core/lib/surface/server.cc
@@ -106,7 +106,7 @@ struct Server::RegisteredMethod {
   const grpc_server_register_method_payload_handling payload_handling;
   const uint32_t flags;
   // One request matcher per method.
-  std::unique_ptr<RequestMatcherInterface> matcher;
+  std::shared_ptr<RequestMatcherInterface> matcher;
 };
 
 //
diff --git a/src/core/lib/surface/server.h b/src/core/lib/surface/server.h
index 4bb6fce..45ef7fa 100644
--- a/src/core/lib/surface/server.h
+++ b/src/core/lib/surface/server.h
@@ -151,7 +151,7 @@ class Server : public InternallyRefCounted<Server>,
   }
 
   void set_config_fetcher(
-      std::unique_ptr<grpc_server_config_fetcher> config_fetcher);
+      std::shared_ptr<grpc_server_config_fetcher> config_fetcher);
 
   bool HasOpenConnections() ABSL_LOCKS_EXCLUDED(mu_global_);
 
@@ -444,7 +444,8 @@ class Server : public InternallyRefCounted<Server>,
 
   ChannelArgs const channel_args_;
   RefCountedPtr<channelz::ServerNode> channelz_node_;
-  std::unique_ptr<grpc_server_config_fetcher> config_fetcher_;
+  // Fix static_assert(sizeof(_Tp) >= 0, "cannot delete an incomplete type");
+  std::shared_ptr<grpc_server_config_fetcher> config_fetcher_;
   ServerCallTracerFactory* const server_call_tracer_factory_;
 
   std::vector<grpc_completion_queue*> cqs_;
@@ -468,12 +469,12 @@ class Server : public InternallyRefCounted<Server>,
 
   // Map of registered methods.
   absl::flat_hash_map<std::pair<std::string, std::string> /*host, method*/,
-                      std::unique_ptr<RegisteredMethod>,
+                      std::shared_ptr<RegisteredMethod>,
                       StringViewStringViewPairHash, StringViewStringViewPairEq>
       registered_methods_;
 
   // Request matcher for unregistered methods.
-  std::unique_ptr<RequestMatcherInterface> unregistered_request_matcher_;
+  std::shared_ptr<RequestMatcherInterface> unregistered_request_matcher_;
 
   // The shutdown refs counter tracks whether or not shutdown has been called
   // and whether there are any AllocatingRequestMatcher requests that have been
@@ -542,7 +543,7 @@ struct grpc_server_config_fetcher {
 namespace grpc_core {
 
 inline void Server::set_config_fetcher(
-    std::unique_ptr<grpc_server_config_fetcher> config_fetcher) {
+    std::shared_ptr<grpc_server_config_fetcher> config_fetcher) {
   config_fetcher_ = std::move(config_fetcher);
 }
 
diff --git a/third_party/upb/upb/text/encode.c b/third_party/upb/upb/text/encode.c
index 6d26fac..26dca2d 100644
--- a/third_party/upb/upb/text/encode.c
+++ b/third_party/upb/upb/text/encode.c
@@ -288,7 +288,7 @@ static void txtenc_map(txtenc* e, const upb_Map* map, const upb_FieldDef* f) {
 #define CHK(x)      \
   do {              \
     if (!(x)) {     \
-      return false; \
+      return NULL;  \
     }               \
   } while (0)
 
