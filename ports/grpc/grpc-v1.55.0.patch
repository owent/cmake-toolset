diff --git a/src/core/lib/surface/server.cc b/src/core/lib/surface/server.cc
index 9c67a82..d1ec553 100644
--- a/src/core/lib/surface/server.cc
+++ b/src/core/lib/surface/server.cc
@@ -155,7 +155,7 @@ struct Server::RegisteredMethod {
   const grpc_server_register_method_payload_handling payload_handling;
   const uint32_t flags;
   // One request matcher per method.
-  std::unique_ptr<RequestMatcherInterface> matcher;
+  std::shared_ptr<RequestMatcherInterface> matcher;
 };
 
 //
@@ -734,7 +734,7 @@ void Server::Start() {
   if (unregistered_request_matcher_ == nullptr) {
     unregistered_request_matcher_ = std::make_unique<RealRequestMatcher>(this);
   }
-  for (std::unique_ptr<RegisteredMethod>& rm : registered_methods_) {
+  for (std::shared_ptr<RegisteredMethod>& rm : registered_methods_) {
     if (rm->matcher == nullptr) {
       rm->matcher = std::make_unique<RealRequestMatcher>(this);
     }
@@ -841,7 +841,7 @@ Server::RegisteredMethod* Server::RegisterMethod(
             "grpc_server_register_method method string cannot be NULL");
     return nullptr;
   }
-  for (std::unique_ptr<RegisteredMethod>& m : registered_methods_) {
+  for (std::shared_ptr<RegisteredMethod>& m : registered_methods_) {
     if (streq(m->method, method) && streq(m->host, host)) {
       gpr_log(GPR_ERROR, "duplicate registration for %s@%s", method,
               host ? host : "*");
@@ -906,7 +906,7 @@ void Server::KillPendingWorkLocked(grpc_error_handle error) {
   if (started_) {
     unregistered_request_matcher_->KillRequests(error);
     unregistered_request_matcher_->ZombifyPending();
-    for (std::unique_ptr<RegisteredMethod>& rm : registered_methods_) {
+    for (std::shared_ptr<RegisteredMethod>& rm : registered_methods_) {
       rm->matcher->KillRequests(error);
       rm->matcher->ZombifyPending();
     }
@@ -1182,7 +1182,7 @@ void Server::ChannelData::InitTransport(RefCountedPtr<Server> server,
     size_t slots = 2 * num_registered_methods;
     registered_methods_ =
         std::make_unique<std::vector<ChannelRegisteredMethod>>(slots);
-    for (std::unique_ptr<RegisteredMethod>& rm : server_->registered_methods_) {
+    for (std::shared_ptr<RegisteredMethod>& rm : server_->registered_methods_) {
       Slice host;
       Slice method = Slice::FromExternalString(rm->method);
       const bool has_host = !rm->host.empty();
diff --git a/src/core/lib/surface/server.h b/src/core/lib/surface/server.h
index d635da5..448563d 100644
--- a/src/core/lib/surface/server.h
+++ b/src/core/lib/surface/server.h
@@ -140,7 +140,7 @@ class Server : public InternallyRefCounted<Server>,
   }
 
   void set_config_fetcher(
-      std::unique_ptr<grpc_server_config_fetcher> config_fetcher) {
+      std::shared_ptr<grpc_server_config_fetcher> config_fetcher) {
     config_fetcher_ = std::move(config_fetcher);
   }
 
@@ -444,7 +444,8 @@ class Server : public InternallyRefCounted<Server>,
 
   ChannelArgs const channel_args_;
   RefCountedPtr<channelz::ServerNode> channelz_node_;
-  std::unique_ptr<grpc_server_config_fetcher> config_fetcher_;
+  // Fix static_assert(sizeof(_Tp) >= 0, "cannot delete an incomplete type");
+  std::shared_ptr<grpc_server_config_fetcher> config_fetcher_;
 
   std::vector<grpc_completion_queue*> cqs_;
   std::vector<grpc_pollset*> pollsets_;
@@ -465,10 +466,11 @@ class Server : public InternallyRefCounted<Server>,
   bool starting_ ABSL_GUARDED_BY(mu_global_) = false;
   CondVar starting_cv_;
 
-  std::vector<std::unique_ptr<RegisteredMethod>> registered_methods_;
+  std::vector<std::shared_ptr<RegisteredMethod>> registered_methods_;
 
   // Request matcher for unregistered methods.
-  std::unique_ptr<RequestMatcherInterface> unregistered_request_matcher_;
+  // Fix static_assert(sizeof(_Tp) >= 0, "cannot delete an incomplete type");
+  std::shared_ptr<RequestMatcherInterface> unregistered_request_matcher_;
 
   // The shutdown refs counter tracks whether or not shutdown has been called
   // and whether there are any AllocatingRequestMatcher requests that have been
diff --git a/third_party/upb/cmake/make_cmakelists.py b/third_party/upb/cmake/make_cmakelists.py
index 6e552ba..53ac00e 100755
--- a/third_party/upb/cmake/make_cmakelists.py
+++ b/third_party/upb/cmake/make_cmakelists.py
@@ -39,8 +39,14 @@ import sys
 import textwrap
 import os
 
+def MappingThirdPartyDep(dep):
+  if dep.startswith("/third_party/"):
+    return dep[13:]
+  return dep
+
+
 def StripFirstChar(deps):
-  return [dep[1:] for dep in deps]
+  return [MappingThirdPartyDep(dep[1:]) for dep in deps]
 
 def IsSourceFile(name):
   return name.endswith(".c") or name.endswith(".cc")
@@ -83,11 +89,16 @@ class BuildFileFunctions(object):
 
     if list(filter(IsSourceFile, files)):
       # Has sources, make this a normal library.
-      self.converter.toplevel += "add_library(%s\n  %s)\n" % (
+      output_name = kwargs["name"]
+      if output_name.lower() != "upb":
+        output_name = "upb-" + output_name
+      self.converter.toplevel += "add_library({0}\n  {1})\nset_target_properties({0} PROPERTIES OUTPUT_NAME \"{2}\")\n".format(
           kwargs["name"],
-          "\n  ".join(found_files)
+          "\n  ".join(found_files),
+          output_name
       )
-      self._add_deps(kwargs)
+      self.converter.export_targets.append(kwargs["name"])
+      self._add_deps(kwargs, " PUBLIC")
     else:
       # Header-only library, have to do a couple things differently.
       # For some info, see:
@@ -95,6 +106,7 @@ class BuildFileFunctions(object):
       self.converter.toplevel += "add_library(%s INTERFACE)\n" % (
           kwargs["name"]
       )
+      self.converter.export_targets.append(kwargs["name"])
       self._add_deps(kwargs, " INTERFACE")
 
   def cc_binary(self, **kwargs):
@@ -287,12 +299,14 @@ class Converter(object):
     self.toplevel = ""
     self.if_lua = ""
     self.utf8_range_commit = ""
+    self.export_targets = []
 
   def convert(self):
     return self.template % {
         "prelude": converter.prelude,
         "toplevel": converter.toplevel,
         "utf8_range_commit": converter.utf8_range_commit,
+        "export_targets": ' '.join(converter.export_targets),
     }
 
   template = textwrap.dedent("""\
@@ -322,6 +336,15 @@ class Converter(object):
           "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."
           FORCE)
     endif()
+    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH YES)
+    set(CMAKE_BUILD_RPATH_USE_ORIGIN YES)
+    if (UNIX AND NOT APPLE)
+      set(CMAKE_INSTALL_RPATH "$ORIGIN" "$ORIGIN/../lib64" "$ORIGIN/../lib")
+      set(CMAKE_BUILD_RPATH  "$ORIGIN" "$ORIGIN/../lib64" "$ORIGIN/../lib")
+    elseif (APPLE)
+      set(CMAKE_INSTALL_RPATH "@rpath" "@rpath/../lib64" "@rpath/../lib")
+      set(CMAKE_BUILD_RPATH  "@rpath" "@rpath/../lib64" "@rpath/../lib")
+    endif()
 
     # When using Ninja, compiler output won't be colorized without this.
     include(CheckCXXCompilerFlag)
@@ -352,7 +375,9 @@ class Converter(object):
     if(NOT TARGET utf8_range)
       if(EXISTS ../external/utf8_range)
         # utf8_range is already installed
-        include_directories(../external/utf8_range)
+        set(utf8_range_ENABLE_TESTS FALSE CACHE BOOL "" FORCE)
+        set(utf8_range_ENABLE_INSTALL TRUE CACHE BOOL "" FORCE)
+        add_subdirectory(../external/utf8_range)
       else()
         include(FetchContent)
         FetchContent_Declare(
@@ -363,7 +388,9 @@ class Converter(object):
         FetchContent_GetProperties(utf8_range)
         if(NOT utf8_range_POPULATED)
           FetchContent_Populate(utf8_range)
-          include_directories(${utf8_range_SOURCE_DIR})
+          set(utf8_range_ENABLE_TESTS FALSE CACHE BOOL "" FORCE)
+          set(utf8_range_ENABLE_INSTALL TRUE CACHE BOOL "" FORCE)
+          add_subdirectory(${utf8_range_SOURCE_DIR})
         endif()
       endif()
     endif()
@@ -374,10 +401,161 @@ class Converter(object):
       set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--build-id")
     endif()
 
+    if (MSVC)
+      add_compile_options(/wd4146 /wd4703 -D_CRT_SECURE_NO_WARNINGS)
+    endif()
+
     enable_testing()
 
+    if (UPB_BUILD_CODEGEN)
+      find_package(absl CONFIG REQUIRED)
+      find_package(protobuf CONFIG REQUIRED)
+    endif()
+
+    add_library(descriptor_upb_proto)
+    set_target_properties(descriptor_upb_proto PROPERTIES OUTPUT_NAME "upb-descriptor_upb_proto")
+
     %(toplevel)s
 
+    set(UPB_DESCRIPTOR_PROTO "${UPB_HOST_INCLUDE_DIR}/google/protobuf/descriptor.proto")
+    if (UPB_BUILD_CODEGEN)
+      set(UPB_CODEGEN_TARGETS protoc-gen-upb protoc-gen-upbdefs protoc-gen-lua)
+
+      add_executable(protoc-gen-upbdefs
+        ../upbc/common.h
+        ../upbc/common.cc
+        ../upbc/protoc-gen-upbdefs.cc
+      )
+      target_link_libraries(protoc-gen-upbdefs PRIVATE
+        absl::flat_hash_map
+        absl::strings
+        protobuf::libprotobuf
+        protobuf::libprotoc
+      )
+
+      add_executable(protoc-gen-upb
+        ../upbc/common.h
+        ../upbc/common.cc
+        ../upbc/protoc-gen-upb.cc
+      )
+      add_dependencies(protoc-gen-upb mini_table upb)
+      target_link_libraries(protoc-gen-upb PRIVATE
+        mini_table
+        port
+        upb
+        absl::flat_hash_map
+        absl::flat_hash_set
+        absl::strings
+        protobuf::libprotobuf
+        protobuf::libprotoc
+      )
+
+      add_executable(protoc-gen-lua
+        ../upb/bindings/lua/upbc.cc
+      )
+      target_link_libraries(protoc-gen-lua PRIVATE
+        absl::strings
+        protobuf::libprotobuf
+        protobuf::libprotoc
+      )
+
+      set(PROTOC_PROGRAM "\$<TARGET_FILE:protobuf::protoc>")
+      set(PROTOC_GEN_UPB_PROGRAM "\$<TARGET_FILE:protoc-gen-upb>")
+      set(PROTOC_GEN_UPBDEFS_PROGRAM "\$<TARGET_FILE:protoc-gen-upbdefs>")
+      set(PROTOC_GEN_UPBLUA_PROGRAM "\$<TARGET_FILE:protoc-gen-lua>")
+    else()
+      find_program(PROTOC_PROGRAM protoc)
+      find_program(PROTOC_GEN_UPB_PROGRAM protoc-gen-upb)
+      find_program(PROTOC_GEN_UPBDEFS_PROGRAM protoc-gen-upbdefs)
+      find_program(PROTOC_GEN_UPBLUA_PROGRAM protoc-gen-lua)
+    endif()
+
+    set(UPB_DESCRIPTOR_SOURCES
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upb.h"
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upb.c"
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upbdefs.h"
+      "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upbdefs.c"
+    )
+
+    unset(UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_LUAS)
+    unset(UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_HEADERS)
+    unset(UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_SOURCES)
+    unset(UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_FILES)
+    set(UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_NAMES any api duration empty
+        field_mask source_context struct timestamp type wrappers)
+    foreach(PROTO_NAME IN LISTS UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_NAMES)
+      list(APPEND UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_FILES
+            "${UPB_HOST_INCLUDE_DIR}/google/protobuf/${PROTO_NAME}.proto")
+      list(APPEND UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_LUAS
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/${PROTO_NAME}_pb.lua")
+      list(APPEND UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_HEADERS
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/${PROTO_NAME}.upb.h"
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/${PROTO_NAME}.upbdefs.h")
+      list(APPEND UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_SOURCES
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/${PROTO_NAME}.upb.c"
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/${PROTO_NAME}.upbdefs.c")
+    endforeach()
+
+    add_custom_command(
+      OUTPUT ${UPB_DESCRIPTOR_SOURCES}
+            "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor_pb.lua"
+            ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_LUAS}
+            ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_HEADERS}
+            ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_SOURCES}
+      DEPENDS "${UPB_DESCRIPTOR_PROTO}" ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_FILES}
+      COMMAND
+        "${PROTOC_PROGRAM}"
+        "-I${UPB_HOST_INCLUDE_DIR}"
+        "--plugin=protoc-gen-upb=${PROTOC_GEN_UPB_PROGRAM}"
+        "--plugin=protoc-gen-upbdefs=${PROTOC_GEN_UPBDEFS_PROGRAM}"
+        "--plugin=protoc-gen-lua=${PROTOC_GEN_UPBLUA_PROGRAM}"
+        "--upb_out=${CMAKE_CURRENT_BINARY_DIR}"
+        "--upbdefs_out=${CMAKE_CURRENT_BINARY_DIR}"
+        "--lua_out=${CMAKE_CURRENT_BINARY_DIR}"
+        "${UPB_DESCRIPTOR_PROTO}" ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_PROTO_FILES}
+    )
+
+    target_sources(descriptor_upb_proto PRIVATE ${UPB_DESCRIPTOR_SOURCES})
+    target_link_libraries(descriptor_upb_proto PUBLIC upb)
+
+    add_library(well_known_types ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_HEADERS}
+      ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_SOURCES})
+    set_target_properties(well_known_types PROPERTIES OUTPUT_NAME "upb-well_known_types")
+    target_link_libraries(well_known_types PUBLIC upb)
+
+    include(GNUInstallDirs)
+    install(
+      DIRECTORY ../upb
+      DESTINATION include
+      FILES_MATCHING
+      PATTERN "*.h"
+      PATTERN "*.hpp"
+      PATTERN "*.inc"
+      PATTERN "*.int.h"
+    )
+    install(
+      FILES
+        "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upb.h"
+        "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor.upbdefs.h"
+        "${CMAKE_CURRENT_BINARY_DIR}/google/protobuf/descriptor_pb.lua"
+        ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_LUAS}
+        ${UPB_DESCRIPTOR_UPB_WELL_KNOWN_TYPES_HEADERS}
+      DESTINATION include/google/protobuf
+    )
+    install(
+      DIRECTORY ../upb/bindings/lua/
+      DESTINATION share/upb/upb/bindings/lua
+    )
+    target_include_directories(upb PUBLIC $<INSTALL_INTERFACE:include>)
+    install(TARGETS
+      descriptor_upb_proto
+      well_known_types
+      %(export_targets)s
+      ${UPB_CODEGEN_TARGETS}
+      EXPORT upb-config
+    )
+    install(EXPORT upb-config NAMESPACE upb:: DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/upb")
+
   """)
 
 data = {}
diff --git a/third_party/upb/lua/def.c b/third_party/upb/lua/def.c
index 90161ec..b0b8acd 100644
--- a/third_party/upb/lua/def.c
+++ b/third_party/upb/lua/def.c
@@ -617,7 +617,7 @@ const upb_FileDef* lupb_FileDef_check(lua_State* L, int narg) {
 
 static int lupb_FileDef_Dependency(lua_State* L) {
   const upb_FileDef* f = lupb_FileDef_check(L, 1);
-  int index = luaL_checkint(L, 2);
+  int index = luaL_checkinteger(L, 2);
   const upb_FileDef* dep = upb_FileDef_Dependency(f, index);
   lupb_wrapper_pushwrapper(L, 1, dep, LUPB_FILEDEF);
   return 1;
@@ -631,7 +631,7 @@ static int lupb_FileDef_DependencyCount(lua_State* L) {
 
 static int lupb_FileDef_enum(lua_State* L) {
   const upb_FileDef* f = lupb_FileDef_check(L, 1);
-  int index = luaL_checkint(L, 2);
+  int index = luaL_checkinteger(L, 2);
   const upb_EnumDef* e = upb_FileDef_TopLevelEnum(f, index);
   lupb_wrapper_pushwrapper(L, 1, e, LUPB_ENUMDEF);
   return 1;
@@ -645,7 +645,7 @@ static int lupb_FileDef_enumcount(lua_State* L) {
 
 static int lupb_FileDef_msg(lua_State* L) {
   const upb_FileDef* f = lupb_FileDef_check(L, 1);
-  int index = luaL_checkint(L, 2);
+  int index = luaL_checkinteger(L, 2);
   const upb_MessageDef* m = upb_FileDef_TopLevelMessage(f, index);
   lupb_wrapper_pushwrapper(L, 1, m, LUPB_MSGDEF);
   return 1;
diff --git a/third_party/upb/lua/upb.c b/third_party/upb/lua/upb.c
index 8c73e5f..f6ff011 100644
--- a/third_party/upb/lua/upb.c
+++ b/third_party/upb/lua/upb.c
@@ -61,11 +61,13 @@
 /* Lua compatibility code *****************************************************/
 
 /* Shims for upcoming Lua 5.3 functionality. */
+#if LUA_VERSION_NUM < 503
 static bool lua_isinteger(lua_State* L, int argn) {
   LUPB_UNUSED(L);
   LUPB_UNUSED(argn);
   return false;
 }
+#endif
 
 /* Utility functions **********************************************************/
 
diff --git a/third_party/upb/lua/upbc.cc b/third_party/upb/lua/upbc.cc
index e857f7a..8efb491 100644
--- a/third_party/upb/lua/upbc.cc
+++ b/third_party/upb/lua/upbc.cc
@@ -79,7 +79,7 @@ static void PrintString(int max_cols, absl::string_view* str,
     } else if (ch == '\'') {
       printer->PrintRaw("\\'");
       max_cols--;
-    } else if (isprint(ch)) {
+    } else if (isprint(static_cast<int>(static_cast<unsigned char>(ch)))) {
       printer->WriteRaw(&ch, 1);
       max_cols--;
     } else {
diff --git a/third_party/upb/upb/text/encode.c b/third_party/upb/upb/text/encode.c
index c694088..33438be 100644
--- a/third_party/upb/upb/text/encode.c
+++ b/third_party/upb/upb/text/encode.c
@@ -308,7 +308,7 @@ static void txtenc_map(txtenc* e, const upb_Map* map, const upb_FieldDef* f) {
 #define CHK(x)      \
   do {              \
     if (!(x)) {     \
-      return false; \
+      return NULL; \
     }               \
   } while (0)
 
