diff --git a/api/include/opentelemetry/common/macros.h b/api/include/opentelemetry/common/macros.h
index 71d12a5..6020c59 100644
--- a/api/include/opentelemetry/common/macros.h
+++ b/api/include/opentelemetry/common/macros.h
@@ -521,3 +521,16 @@ point.
 #else
 #  define OPENTELEMETRY_SANITIZER_NO_ADDRESS
 #endif
+
+// ====== Patch for GCC 4.8 ======
+#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ == 4) && (__GNUC_MINOR__ == 8)
+#include <memory>
+namespace std
+{
+template <class T, class... ArgsT>
+unique_ptr<T> make_unique(ArgsT &&...args)
+{
+  return unique_ptr<T>(new T(std::forward<ArgsT>(args)...));
+}
+}  // namespace std
+#endif
diff --git a/api/include/opentelemetry/nostd/type_traits.h b/api/include/opentelemetry/nostd/type_traits.h
index a797c1e..3134e01 100644
--- a/api/include/opentelemetry/nostd/type_traits.h
+++ b/api/include/opentelemetry/nostd/type_traits.h
@@ -20,7 +20,7 @@
 #endif
 
 #if !defined(__GLIBCXX__) || (defined(_GLIBCXX_RELEASE) && _GLIBCXX_RELEASE >= 7) || \
-    (defined(__GLIBCXX__) && __GLIBCXX__ >= 20150422)  // >= libstdc++-5
+    (defined(__GLIBCXX__) && __GLIBCXX__ >= 20150422 && (!defined(__GNUC__) || __GNUC__ >= 5))  // >= libstdc++-5
 #  define OPENTELEMETRY_TRIVIALITY_TYPE_TRAITS
 #endif
 
diff --git a/exporters/otlp/src/otlp_file_client.cc b/exporters/otlp/src/otlp_file_client.cc
index dab2128..6f0e6af 100644
--- a/exporters/otlp/src/otlp_file_client.cc
+++ b/exporters/otlp/src/otlp_file_client.cc
@@ -1234,8 +1234,6 @@ class OPENTELEMETRY_LOCAL_SYMBOL OtlpFileSystemBackend : public OtlpFileAppender
     }
     file_path[file_path_size] = 0;
 
-    std::shared_ptr<FILE> of = std::make_shared<FILE>();
-
     std::string directory_name = FileSystemUtil::DirName(file_path);
     if (!directory_name.empty())
     {
@@ -1290,7 +1288,7 @@ class OPENTELEMETRY_LOCAL_SYMBOL OtlpFileSystemBackend : public OtlpFileAppender
                               << " failed with pattern: " << options_.file_pattern << hint);
       return nullptr;
     }
-    of = std::shared_ptr<std::FILE>(new_file, fclose);
+    std::shared_ptr<FILE> of = std::shared_ptr<std::FILE>(new_file, fclose);
 
     fseek(of.get(), 0, SEEK_END);
     file_->written_size = static_cast<size_t>(ftell(of.get()));
