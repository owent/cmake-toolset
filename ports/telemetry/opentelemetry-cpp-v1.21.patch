diff --git a/api/include/opentelemetry/common/macros.h b/api/include/opentelemetry/common/macros.h
index 71d12a5..6020c59 100644
--- a/api/include/opentelemetry/common/macros.h
+++ b/api/include/opentelemetry/common/macros.h
@@ -521,3 +521,16 @@ point.
 #else
 #  define OPENTELEMETRY_SANITIZER_NO_ADDRESS
 #endif
+
+// ====== Patch for GCC 4.8 ======
+#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ == 4) && (__GNUC_MINOR__ == 8)
+#include <memory>
+namespace std
+{
+template <class T, class... ArgsT>
+unique_ptr<T> make_unique(ArgsT &&...args)
+{
+  return unique_ptr<T>(new T(std::forward<ArgsT>(args)...));
+}
+}  // namespace std
+#endif
diff --git a/api/include/opentelemetry/nostd/type_traits.h b/api/include/opentelemetry/nostd/type_traits.h
index a797c1e..3134e01 100644
--- a/api/include/opentelemetry/nostd/type_traits.h
+++ b/api/include/opentelemetry/nostd/type_traits.h
@@ -20,7 +20,7 @@
 #endif
 
 #if !defined(__GLIBCXX__) || (defined(_GLIBCXX_RELEASE) && _GLIBCXX_RELEASE >= 7) || \
-    (defined(__GLIBCXX__) && __GLIBCXX__ >= 20150422)  // >= libstdc++-5
+    (defined(__GLIBCXX__) && __GLIBCXX__ >= 20150422 && (!defined(__GNUC__) || __GNUC__ >= 5))  // >= libstdc++-5
 #  define OPENTELEMETRY_TRIVIALITY_TYPE_TRAITS
 #endif
 
diff --git a/exporters/otlp/src/otlp_file_client.cc b/exporters/otlp/src/otlp_file_client.cc
index dab2128..6f0e6af 100644
--- a/exporters/otlp/src/otlp_file_client.cc
+++ b/exporters/otlp/src/otlp_file_client.cc
@@ -1234,8 +1234,6 @@ class OPENTELEMETRY_LOCAL_SYMBOL OtlpFileSystemBackend : public OtlpFileAppender
     }
     file_path[file_path_size] = 0;
 
-    std::shared_ptr<FILE> of = std::make_shared<FILE>();
-
     std::string directory_name = FileSystemUtil::DirName(file_path);
     if (!directory_name.empty())
     {
@@ -1290,7 +1288,7 @@ class OPENTELEMETRY_LOCAL_SYMBOL OtlpFileSystemBackend : public OtlpFileAppender
                               << " failed with pattern: " << options_.file_pattern << hint);
       return nullptr;
     }
-    of = std::shared_ptr<std::FILE>(new_file, fclose);
+    std::shared_ptr<FILE> of = std::shared_ptr<std::FILE>(new_file, fclose);
 
     fseek(of.get(), 0, SEEK_END);
     file_->written_size = static_cast<size_t>(ftell(of.get()));
diff --git a/ext/include/opentelemetry/ext/http/client/curl/http_operation_curl.h b/ext/include/opentelemetry/ext/http/client/curl/http_operation_curl.h
index 2c35651..8e65012 100644
--- a/ext/include/opentelemetry/ext/http/client/curl/http_operation_curl.h
+++ b/ext/include/opentelemetry/ext/http/client/curl/http_operation_curl.h
@@ -344,6 +344,7 @@ class HttpOperation
     std::promise<CURLcode> result_promise;
     std::future<CURLcode> result_future;
   };
+  friend class HttpOperationAccessor;
   std::unique_ptr<AsyncData> async_data_;
 };
 }  // namespace curl
diff --git a/ext/src/http/client/curl/http_operation_curl.cc b/ext/src/http/client/curl/http_operation_curl.cc
index b1e5e4c..c4f5fb4 100644
--- a/ext/src/http/client/curl/http_operation_curl.cc
+++ b/ext/src/http/client/curl/http_operation_curl.cc
@@ -47,6 +47,28 @@ namespace client
 namespace curl
 {
 
+class HttpOperationAccessor
+{
+public:
+  OPENTELEMETRY_SANITIZER_NO_THREAD static std::thread::id GetThreadId(
+      const HttpOperation::AsyncData &async_data)
+  {
+#if defined(OPENTELEMETRY_HAVE_THREAD_SANITIZER) && OPENTELEMETRY_HAVE_THREAD_SANITIZER
+    std::atomic_thread_fence(std::memory_order_acquire);
+#endif
+    return async_data.callback_thread;
+  }
+
+  OPENTELEMETRY_SANITIZER_NO_THREAD static void SetThreadId(HttpOperation::AsyncData &async_data,
+                                                            std::thread::id thread_id)
+  {
+    async_data.callback_thread = thread_id;
+#if defined(OPENTELEMETRY_HAVE_THREAD_SANITIZER) && OPENTELEMETRY_HAVE_THREAD_SANITIZER
+    std::atomic_thread_fence(std::memory_order_release);
+#endif
+  }
+};
+
 size_t HttpOperation::WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp)
 {
   HttpOperation *self = reinterpret_cast<HttpOperation *>(userp);
@@ -335,7 +357,7 @@ HttpOperation::~HttpOperation()
     case opentelemetry::ext::http::client::SessionState::Sending: {
       if (async_data_ && async_data_->result_future.valid())
       {
-        if (async_data_->callback_thread != std::this_thread::get_id())
+        if (HttpOperationAccessor::GetThreadId(*async_data_) != std::this_thread::get_id())
         {
           async_data_->result_future.wait();
           last_curl_result_ = async_data_->result_future.get();
@@ -360,7 +382,7 @@ void HttpOperation::Finish()
   if (async_data_ && async_data_->result_future.valid())
   {
     // We should not wait in callback from Cleanup()
-    if (async_data_->callback_thread != std::this_thread::get_id())
+    if (HttpOperationAccessor::GetThreadId(*async_data_) != std::this_thread::get_id())
     {
       async_data_->result_future.wait();
       last_curl_result_ = async_data_->result_future.get();
@@ -412,9 +434,9 @@ void HttpOperation::Cleanup()
     callback.swap(async_data_->callback);
     if (callback)
     {
-      async_data_->callback_thread = std::this_thread::get_id();
+      HttpOperationAccessor::SetThreadId(*async_data_, std::this_thread::get_id());
       callback(*this);
-      async_data_->callback_thread = std::thread::id();
+      HttpOperationAccessor::SetThreadId(*async_data_, std::thread::id());
     }
 
     // Set value to promise to continue Finish()
@@ -515,6 +537,7 @@ std::chrono::system_clock::time_point HttpOperation::NextRetryTime()
 #  define HAVE_TLS_VERSION
 #endif
 
+// NOLINTNEXTLINE(google-runtime-int)
 static long parse_min_ssl_version(const std::string &version)
 {
 #ifdef HAVE_TLS_VERSION
@@ -532,6 +555,7 @@ static long parse_min_ssl_version(const std::string &version)
   return 0;
 }
 
+// NOLINTNEXTLINE(google-runtime-int)
 static long parse_max_ssl_version(const std::string &version)
 {
 #ifdef HAVE_TLS_VERSION
@@ -591,6 +615,7 @@ CURLcode HttpOperation::SetCurlPtrOption(CURLoption option, void *value)
   return rc;
 }
 
+// NOLINTNEXTLINE(google-runtime-int)
 CURLcode HttpOperation::SetCurlLongOption(CURLoption option, long value)
 {
   CURLcode rc;
@@ -877,8 +902,10 @@ CURLcode HttpOperation::Setup()
 
 #ifdef HAVE_TLS_VERSION
     /* By default, TLSv1.2 or better is required (if we have TLS). */
+    // NOLINTNEXTLINE(google-runtime-int)
     long min_ssl_version = CURL_SSLVERSION_TLSv1_2;
 #else
+    // NOLINTNEXTLINE(google-runtime-int)
     long min_ssl_version = 0;
 #endif
 
@@ -903,6 +930,7 @@ CURLcode HttpOperation::Setup()
      * The CURL + openssl library may be more recent than this code,
      * and support a version we do not know about.
      */
+    // NOLINTNEXTLINE(google-runtime-int)
     long max_ssl_version = 0;
 
     if (!ssl_options_.ssl_max_tls.empty())
@@ -921,6 +949,7 @@ CURLcode HttpOperation::Setup()
 #endif
     }
 
+    // NOLINTNEXTLINE(google-runtime-int)
     long version_range = min_ssl_version | max_ssl_version;
     if (version_range != 0)
     {
@@ -967,6 +996,7 @@ CURLcode HttpOperation::Setup()
     if (ssl_options_.ssl_insecure_skip_verify)
     {
       /* 6 - DO NOT ENFORCE VERIFICATION, This is not secure. */
+      // NOLINTNEXTLINE(google-runtime-int)
       rc = SetCurlLongOption(CURLOPT_USE_SSL, static_cast<long>(CURLUSESSL_NONE));
       if (rc != CURLE_OK)
       {
@@ -988,6 +1018,7 @@ CURLcode HttpOperation::Setup()
     else
     {
       /* 6 - ENFORCE VERIFICATION */
+      // NOLINTNEXTLINE(google-runtime-int)
       rc = SetCurlLongOption(CURLOPT_USE_SSL, static_cast<long>(CURLUSESSL_ALL));
       if (rc != CURLE_OK)
       {
@@ -1042,7 +1073,7 @@ CURLcode HttpOperation::Setup()
 
   // TODO: control local port to use
   // curl_easy_setopt(curl, CURLOPT_LOCALPORT, dcf_port);
-
+  // NOLINTNEXTLINE(google-runtime-int)
   rc = SetCurlLongOption(CURLOPT_TIMEOUT_MS, static_cast<long>(http_conn_timeout_.count()));
   if (rc != CURLE_OK)
   {
diff --git a/sdk/src/logs/multi_log_record_processor.cc b/sdk/src/logs/multi_log_record_processor.cc
index 1841a75..1960042 100644
--- a/sdk/src/logs/multi_log_record_processor.cc
+++ b/sdk/src/logs/multi_log_record_processor.cc
@@ -73,39 +73,33 @@ void MultiLogRecordProcessor::OnEmit(std::unique_ptr<Recordable> &&record) noexc
 
 bool MultiLogRecordProcessor::ForceFlush(std::chrono::microseconds timeout) noexcept
 {
-  // Convert to nanos to prevent overflow
-  std::chrono::nanoseconds timeout_ns = std::chrono::nanoseconds::max();
-  if (std::chrono::duration_cast<std::chrono::microseconds>(timeout_ns) > timeout)
-  {
-    timeout_ns = std::chrono::duration_cast<std::chrono::nanoseconds>(timeout);
-  }
   bool result           = true;
   auto start_time       = std::chrono::system_clock::now();
   auto overflow_checker = std::chrono::system_clock::time_point::max();
   std::chrono::system_clock::time_point expire_time;
-  if (overflow_checker - start_time <= timeout_ns)
+  if (std::chrono::duration_cast<std::chrono::microseconds>(overflow_checker - start_time) <= timeout)
   {
     expire_time = overflow_checker;
   }
   else
   {
     expire_time =
-        start_time + std::chrono::duration_cast<std::chrono::system_clock::duration>(timeout_ns);
+        start_time + std::chrono::duration_cast<std::chrono::system_clock::duration>(timeout);
   }
   for (auto &processor : processors_)
   {
-    if (!processor->ForceFlush(std::chrono::duration_cast<std::chrono::microseconds>(timeout_ns)))
+    if (!processor->ForceFlush(timeout))
     {
       result = false;
     }
     start_time = std::chrono::system_clock::now();
     if (expire_time > start_time)
     {
-      timeout_ns = std::chrono::duration_cast<std::chrono::nanoseconds>(expire_time - start_time);
+      timeout = std::chrono::duration_cast<std::chrono::microseconds>(expire_time - start_time);
     }
     else
     {
-      timeout_ns = std::chrono::nanoseconds::zero();
+      timeout = std::chrono::microseconds::zero();
     }
   }
   return result;
@@ -113,37 +107,31 @@ bool MultiLogRecordProcessor::ForceFlush(std::chrono::microseconds timeout) noex
 
 bool MultiLogRecordProcessor::Shutdown(std::chrono::microseconds timeout) noexcept
 {
-  // Converto nanos to prevent overflow
-  std::chrono::nanoseconds timeout_ns = std::chrono::nanoseconds::max();
-  if (std::chrono::duration_cast<std::chrono::microseconds>(timeout_ns) > timeout)
-  {
-    timeout_ns = std::chrono::duration_cast<std::chrono::nanoseconds>(timeout);
-  }
   bool result           = true;
   auto start_time       = std::chrono::system_clock::now();
   auto overflow_checker = std::chrono::system_clock::time_point::max();
   std::chrono::system_clock::time_point expire_time;
-  if (overflow_checker - start_time <= timeout_ns)
+  if (std::chrono::duration_cast<std::chrono::microseconds>(overflow_checker - start_time) <= timeout)
   {
     expire_time = overflow_checker;
   }
   else
   {
     expire_time =
-        start_time + std::chrono::duration_cast<std::chrono::system_clock::duration>(timeout_ns);
+        start_time + std::chrono::duration_cast<std::chrono::system_clock::duration>(timeout);
   }
   for (auto &processor : processors_)
   {
     result |=
-        processor->Shutdown(std::chrono::duration_cast<std::chrono::microseconds>(timeout_ns));
+        processor->Shutdown(timeout);
     start_time = std::chrono::system_clock::now();
     if (expire_time > start_time)
     {
-      timeout_ns = std::chrono::duration_cast<std::chrono::nanoseconds>(expire_time - start_time);
+      timeout = std::chrono::duration_cast<std::chrono::microseconds>(expire_time - start_time);
     }
     else
     {
-      timeout_ns = std::chrono::nanoseconds::zero();
+      timeout = std::chrono::microseconds::zero();
     }
   }
   return result;
