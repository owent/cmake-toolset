diff --git a/CMakeLists.txt b/CMakeLists.txt
index fd41fa7..9edd3a0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -296,6 +296,14 @@ if(WITH_EXAMPLES_HTTP AND NOT WITH_EXAMPLES)
 endif()
 
 find_package(Threads)
+find_package(ZLIB QUIET)
+find_package(zstd QUIET)
+find_package(c-ares QUIET)
+find_package(OpenSSL QUIET)
+find_package(MbedTLS QUIET)
+find_package(Libnghttp3 QUIET)
+find_package(Libngtcp2 QUIET)
+find_package(Libnghttp2 QUIET)
 
 function(install_windows_deps)
   # Bootstrap vcpkg from CMake and auto-install deps in case if we are missing
diff --git a/api/include/opentelemetry/nostd/unique_ptr.h b/api/include/opentelemetry/nostd/unique_ptr.h
index b3f5e61..0b5bd55 100644
--- a/api/include/opentelemetry/nostd/unique_ptr.h
+++ b/api/include/opentelemetry/nostd/unique_ptr.h
@@ -175,6 +175,12 @@ bool operator!=(std::nullptr_t, const unique_ptr<T> &rhs) noexcept
 {
   return nullptr != rhs.get();
 }
+
+template <class T, class... Args>
+unique_ptr<T> make_unique(Args &&...args) {
+  return unique_ptr<T>(new T(std::forward<Args>(args)...));
+}
+
 }  // namespace nostd
 OPENTELEMETRY_END_NAMESPACE
 #endif /* OPENTELEMETRY_HAVE_STD_UNIQUE_PTR */
diff --git a/api/include/opentelemetry/std/unique_ptr.h b/api/include/opentelemetry/std/unique_ptr.h
index 4b25b7c..0c2f1b1 100644
--- a/api/include/opentelemetry/std/unique_ptr.h
+++ b/api/include/opentelemetry/std/unique_ptr.h
@@ -18,5 +18,14 @@ namespace nostd
 template <class... _Types>
 using unique_ptr = std::unique_ptr<_Types...>;
 
+#  if (defined(__cplusplus) && __cplusplus >= 201402L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 201402L)
+using std::make_unique;
+#  else
+template <class T, class... Args>
+unique_ptr<T> make_unique(Args &&...args) {
+  return unique_ptr<T>(new T(std::forward<Args>(args)...));
+}
+#  endif
+
 }  // namespace nostd
 OPENTELEMETRY_END_NAMESPACE
diff --git a/exporters/memory/src/in_memory_metric_exporter_factory.cc b/exporters/memory/src/in_memory_metric_exporter_factory.cc
index f2577c4..40d96ca 100644
--- a/exporters/memory/src/in_memory_metric_exporter_factory.cc
+++ b/exporters/memory/src/in_memory_metric_exporter_factory.cc
@@ -49,7 +49,7 @@ class InMemoryMetricExporter final : public sdk::metrics::PushMetricExporter
       OTEL_INTERNAL_LOG_ERROR("[In Memory Metric Exporter] Exporting failed, exporter is shutdown");
       return ExportResult::kFailure;
     }
-    data_->Add(std::make_unique<ResourceMetrics>(data));
+    data_->Add(nostd::make_unique<ResourceMetrics>(data));
     return ExportResult::kSuccess;
   }
 
@@ -85,7 +85,7 @@ std::unique_ptr<PushMetricExporter> InMemoryMetricExporterFactory::Create(
     const std::shared_ptr<InMemoryMetricData> &data,
     const AggregationTemporalitySelector &temporality)
 {
-  return std::make_unique<InMemoryMetricExporter>(data, temporality);
+  return nostd::make_unique<InMemoryMetricExporter>(data, temporality);
 }
 
 }  // namespace memory
diff --git a/exporters/memory/test/in_memory_metric_data_test.cc b/exporters/memory/test/in_memory_metric_data_test.cc
index ffaba2c..fabc240 100644
--- a/exporters/memory/test/in_memory_metric_data_test.cc
+++ b/exporters/memory/test/in_memory_metric_data_test.cc
@@ -23,7 +23,7 @@ TEST(InMemoryMetricDataTest, CircularBuffer)
 {
   CircularBufferInMemoryMetricData buf(10);
   Resource resource = Resource::GetEmpty();
-  buf.Add(std::make_unique<ResourceMetrics>(
+  buf.Add(nostd::make_unique<ResourceMetrics>(
       &resource, std::vector<ScopeMetrics>{{nullptr, std::vector<MetricData>{}}}));
   EXPECT_EQ((*buf.Get().begin())->resource_, &resource);
 }
@@ -45,7 +45,7 @@ TEST(InMemoryMetricDataTest, SimpleAggregate)
   md.instrument_descriptor.name_ = "my-metric";
   md.point_data_attr_.push_back(pda);
 
-  agg.Add(std::make_unique<ResourceMetrics>(
+  agg.Add(nostd::make_unique<ResourceMetrics>(
       &resource, std::vector<ScopeMetrics>{{scope.get(), std::vector<MetricData>{md}}}));
   auto it = agg.Get("my-scope", "my-metric").begin();
 
