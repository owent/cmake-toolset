diff --git a/CMakeLists.txt b/CMakeLists.txt
index cc085b1..958a4c2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -297,6 +297,14 @@ if(WITH_EXAMPLES_HTTP AND NOT WITH_EXAMPLES)
 endif()
 
 find_package(Threads)
+find_package(ZLIB QUIET)
+find_package(zstd QUIET)
+find_package(c-ares QUIET)
+find_package(OpenSSL QUIET)
+find_package(MbedTLS QUIET)
+find_package(Libnghttp3 QUIET)
+find_package(Libngtcp2 QUIET)
+find_package(Libnghttp2 QUIET)
 
 function(install_windows_deps)
   # Bootstrap vcpkg from CMake and auto-install deps in case if we are missing
diff --git a/api/CMakeLists.txt b/api/CMakeLists.txt
index 0f63a49..78e97ad 100644
--- a/api/CMakeLists.txt
+++ b/api/CMakeLists.txt
@@ -131,6 +131,10 @@ if(WITH_OTLP_HTTP_COMPRESSION)
                              INTERFACE ENABLE_OTLP_COMPRESSION_PREVIEW)
 endif()
 
+if(APPLE)
+  target_link_libraries(opentelemetry_api INTERFACE "-framework CoreFoundation")
+endif()
+
 include(${PROJECT_SOURCE_DIR}/cmake/pkgconfig.cmake)
 
 if(OPENTELEMETRY_INSTALL)
diff --git a/api/include/opentelemetry/common/macros.h b/api/include/opentelemetry/common/macros.h
index db1ca54..c1aa9d5 100644
--- a/api/include/opentelemetry/common/macros.h
+++ b/api/include/opentelemetry/common/macros.h
@@ -3,6 +3,33 @@
 
 #pragma once
 
+/*
+   OPENTELEMETRY_HAVE_BUILTIN&OPENTELEMETRY_HAVE_FEATURE
+
+   Checks whether the compiler supports a Clang Feature Checking Macro, and if
+   so, checks whether it supports the provided builtin function "x" where x
+   is one of the functions noted in
+   https://clang.llvm.org/docs/LanguageExtensions.html
+
+   Note: Use this macro to avoid an extra level of #ifdef __has_builtin check.
+   http://releases.llvm.org/3.3/tools/clang/docs/LanguageExtensions.html
+*/
+#if !defined(OPENTELEMETRY_HAVE_BUILTIN)
+#  ifdef __has_builtin
+#    define OPENTELEMETRY_HAVE_BUILTIN(x) __has_builtin(x)
+#  else
+#    define OPENTELEMETRY_HAVE_BUILTIN(x) 0
+#  endif
+#endif
+
+#if !defined(OPENTELEMETRY_HAVE_FEATURE)
+#  ifdef __has_feature
+#    define OPENTELEMETRY_HAVE_FEATURE(f) __has_feature(f)
+#  else
+#    define OPENTELEMETRY_HAVE_FEATURE(f) 0
+#  endif
+#endif
+
 /*
    Expected usage pattern:
 
@@ -319,3 +346,34 @@ point.
 #  define OPENTELEMETRY_EXPORT
 
 #endif
+
+// OPENTELEMETRY_HAVE_EXCEPTIONS
+//
+// Checks whether the compiler both supports and enables exceptions. Many
+// compilers support a "no exceptions" mode that disables exceptions.
+//
+// Generally, when OPENTELEMETRY_HAVE_EXCEPTIONS is not defined:
+//
+// * Code using `throw` and `try` may not compile.
+// * The `noexcept` specifier will still compile and behave as normal.
+// * The `noexcept` operator may still return `false`.
+//
+// For further details, consult the compiler's documentation.
+#ifndef OPENTELEMETRY_HAVE_EXCEPTIONS
+#  if defined(__clang__) && ((__clang_major__ * 100) + __clang_minor__) < 306
+// Clang < 3.6
+// http://releases.llvm.org/3.6.0/tools/clang/docs/ReleaseNotes.html#the-exceptions-macro
+#    if defined(__EXCEPTIONS) && OPENTELEMETRY_HAVE_FEATURE(cxx_exceptions)
+#      define OPENTELEMETRY_HAVE_EXCEPTIONS 1
+#    endif  // defined(__EXCEPTIONS) && OPENTELEMETRY_HAVE_FEATURE(cxx_exceptions)
+#  elif OPENTELEMETRY_HAVE_FEATURE(cxx_exceptions)
+#    define OPENTELEMETRY_HAVE_EXCEPTIONS 1
+// Handle remaining special cases and default to exceptions being supported.
+#  elif !(defined(__GNUC__) && !defined(__EXCEPTIONS) && !defined(__cpp_exceptions)) && \
+      !(defined(_MSC_VER) && !defined(_CPPUNWIND))
+#    define OPENTELEMETRY_HAVE_EXCEPTIONS 1
+#  endif
+#endif
+#ifndef OPENTELEMETRY_HAVE_EXCEPTIONS
+#  define OPENTELEMETRY_HAVE_EXCEPTIONS 0
+#endif
diff --git a/sdk/include/opentelemetry/sdk/instrumentationscope/instrumentation_scope.h b/sdk/include/opentelemetry/sdk/instrumentationscope/instrumentation_scope.h
index 4f7c906..1bf0fac 100644
--- a/sdk/include/opentelemetry/sdk/instrumentationscope/instrumentation_scope.h
+++ b/sdk/include/opentelemetry/sdk/instrumentationscope/instrumentation_scope.h
@@ -8,6 +8,7 @@
 
 #include "opentelemetry/common/key_value_iterable_view.h"
 #include "opentelemetry/nostd/string_view.h"
+#include "opentelemetry/nostd/type_traits.h"
 #include "opentelemetry/nostd/unique_ptr.h"
 #include "opentelemetry/nostd/variant.h"
 #include "opentelemetry/sdk/common/attribute_utils.h"
@@ -73,7 +74,7 @@ class InstrumentationScope
    */
   template <
       class ArgumentType,
-      std::enable_if_t<opentelemetry::common::detail::is_key_value_iterable<ArgumentType>::value>
+      nostd::enable_if_t<opentelemetry::common::detail::is_key_value_iterable<ArgumentType>::value>
           * = nullptr>
   static nostd::unique_ptr<InstrumentationScope> Create(nostd::string_view name,
                                                         nostd::string_view version,
diff --git a/sdk/src/metrics/export/periodic_exporting_metric_reader.cc b/sdk/src/metrics/export/periodic_exporting_metric_reader.cc
index 91f6041..1cd399c 100644
--- a/sdk/src/metrics/export/periodic_exporting_metric_reader.cc
+++ b/sdk/src/metrics/export/periodic_exporting_metric_reader.cc
@@ -1,6 +1,7 @@
 // Copyright The OpenTelemetry Authors
 // SPDX-License-Identifier: Apache-2.0
 
+#include "opentelemetry/common/macros.h"
 #include "opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader.h"
 #include "opentelemetry/sdk/common/global_log_handler.h"
 #include "opentelemetry/sdk/metrics/push_metric_exporter.h"
@@ -13,6 +14,10 @@
 #  include <future>
 #endif
 
+#if OPENTELEMETRY_HAVE_EXCEPTIONS
+#  include <exception>
+#endif
+
 OPENTELEMETRY_BEGIN_NAMESPACE
 namespace sdk
 {
@@ -73,31 +78,61 @@ void PeriodicExportingMetricReader::DoBackgroundWork()
 
 bool PeriodicExportingMetricReader::CollectAndExportOnce()
 {
-  std::atomic<bool> cancel_export_for_timeout{false};
-  auto future_receive = std::async(std::launch::async, [this, &cancel_export_for_timeout] {
-    Collect([this, &cancel_export_for_timeout](ResourceMetrics &metric_data) {
-      if (cancel_export_for_timeout)
+    std::uint64_t notify_force_flush = force_flush_pending_sequence_.load(std::memory_order_acquire);
+  std::unique_ptr<std::thread> task_thread;
+
+#if OPENTELEMETRY_HAVE_EXCEPTIONS
+  try
+  {
+#endif
+    std::promise<void> sender;
+    auto receiver = sender.get_future();
+
+    task_thread.reset(new std::thread([this, &cancel_export_for_timeout] {
+      this->Collect([this, &cancel_export_for_timeout](ResourceMetrics &metric_data) {
+        if (cancel_export_for_timeout.load(std::memory_order_acquire))
+        {
+          OTEL_INTERNAL_LOG_ERROR(
+              "[Periodic Exporting Metric Reader] Collect took longer configured time: "
+              << this->export_timeout_millis_.count() << " ms, and timed out");
+          return false;
+        }
+        this->exporter_->Export(metric_data);
+        return true;
+      });
+    }));
+
+    std::future_status status;
+    do
+    {
+      status = receiver.wait_for(std::chrono::milliseconds(export_timeout_millis_));
+      if (status == std::future_status::timeout)
       {
-        OTEL_INTERNAL_LOG_ERROR(
-            "[Periodic Exporting Metric Reader] Collect took longer configured time: "
-            << export_timeout_millis_.count() << " ms, and timed out");
-        return false;
+        cancel_export_for_timeout.store(true, std::memory_order_release);
+        break;
       }
-      this->exporter_->Export(metric_data);
-      return true;
-    });
-  });
+    } while (status != std::future_status::ready);
+#if OPENTELEMETRY_HAVE_EXCEPTIONS
+  }
+  catch (std::exception &e)
+  {
+    OTEL_INTERNAL_LOG_ERROR("[Periodic Exporting Metric Reader] Collect failed with exception "
+                            << e.what());
+    return false;
+  }
+  catch (...)
+  {
+    OTEL_INTERNAL_LOG_ERROR(
+        "[Periodic Exporting Metric Reader] Collect failed with unknown exception");
+    return false;
+  }
+#endif
 
-  std::future_status status;
-  do
+  if (task_thread && task_thread->joinable())
   {
-    status = future_receive.wait_for(std::chrono::milliseconds(export_timeout_millis_));
-    if (status == std::future_status::timeout)
-    {
-      cancel_export_for_timeout = true;
-      break;
-    }
-  } while (status != std::future_status::ready);
+    task_thread->join();
+  }
+  
   bool notify_force_flush = is_force_flush_pending_.exchange(false, std::memory_order_acq_rel);
   if (notify_force_flush)
   {
diff --git a/sdk/test/metrics/periodic_exporting_metric_reader_test.cc b/sdk/test/metrics/periodic_exporting_metric_reader_test.cc
index e115f79..f65c10c 100644
--- a/sdk/test/metrics/periodic_exporting_metric_reader_test.cc
+++ b/sdk/test/metrics/periodic_exporting_metric_reader_test.cc
@@ -7,6 +7,10 @@
 
 #include <gtest/gtest.h>
 
+#include <chrono>
+#include <memory>
+#include <thread>
+
 using namespace opentelemetry;
 using namespace opentelemetry::sdk::instrumentationscope;
 using namespace opentelemetry::sdk::metrics;
@@ -14,8 +18,14 @@ using namespace opentelemetry::sdk::metrics;
 class MockPushMetricExporter : public PushMetricExporter
 {
 public:
+  MockPushMetricExporter(std::chrono::milliseconds wait) : wait_(wait) {}
+
   opentelemetry::sdk::common::ExportResult Export(const ResourceMetrics &record) noexcept override
   {
+    if (wait_ > std::chrono::milliseconds::zero())
+    {
+      std::this_thread::sleep_for(wait_);
+    }
     records_.push_back(record);
     return opentelemetry::sdk::common::ExportResult::kSuccess;
   }
@@ -34,6 +44,7 @@ class MockPushMetricExporter : public PushMetricExporter
 
 private:
   std::vector<ResourceMetrics> records_;
+  std::chrono::milliseconds wait_;
 };
 
 class MockMetricProducer : public MetricProducer
@@ -61,17 +72,34 @@ class MockMetricProducer : public MetricProducer
 
 TEST(PeriodicExporingMetricReader, BasicTests)
 {
-  std::unique_ptr<PushMetricExporter> exporter(new MockPushMetricExporter());
+  std::unique_ptr<PushMetricExporter> exporter(
+      new MockPushMetricExporter(std::chrono::milliseconds{0}));
   PeriodicExportingMetricReaderOptions options;
   options.export_timeout_millis  = std::chrono::milliseconds(200);
   options.export_interval_millis = std::chrono::milliseconds(500);
   auto exporter_ptr              = exporter.get();
-  PeriodicExportingMetricReader reader(std::move(exporter), options);
+  std::shared_ptr<PeriodicExportingMetricReader> reader =
+      std::make_shared<PeriodicExportingMetricReader>(std::move(exporter), options);
   MockMetricProducer producer;
-  reader.SetMetricProducer(&producer);
+  reader->SetMetricProducer(&producer);
   std::this_thread::sleep_for(std::chrono::milliseconds(2000));
-  EXPECT_NO_THROW(reader.ForceFlush());
-  reader.Shutdown();
+  EXPECT_NO_THROW(reader->ForceFlush());
+  reader->Shutdown();
   EXPECT_EQ(static_cast<MockPushMetricExporter *>(exporter_ptr)->GetDataCount(),
             static_cast<MockMetricProducer *>(&producer)->GetDataCount());
 }
+
+TEST(PeriodicExporingMetricReader, Timeout)
+{
+  std::unique_ptr<PushMetricExporter> exporter(
+      new MockPushMetricExporter(std::chrono::milliseconds{2000}));
+  PeriodicExportingMetricReaderOptions options;
+  options.export_timeout_millis  = std::chrono::milliseconds(200);
+  options.export_interval_millis = std::chrono::milliseconds(500);
+  std::shared_ptr<PeriodicExportingMetricReader> reader =
+      std::make_shared<PeriodicExportingMetricReader>(std::move(exporter), options);
+  MockMetricProducer producer;
+  reader->SetMetricProducer(&producer);
+  std::this_thread::sleep_for(std::chrono::milliseconds(1000));
+  reader->Shutdown();
+}
