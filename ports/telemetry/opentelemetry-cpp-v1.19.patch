diff --git a/CMakeLists.txt b/CMakeLists.txt
index 88709cf..06a0cc4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -320,6 +320,14 @@ if(WITH_EXAMPLES_HTTP AND NOT WITH_EXAMPLES)
 endif()
 
 find_package(Threads)
+find_package(ZLIB QUIET)
+find_package(zstd QUIET)
+find_package(c-ares QUIET)
+find_package(OpenSSL QUIET)
+find_package(MbedTLS QUIET)
+find_package(Libnghttp3 QUIET)
+find_package(Libngtcp2 QUIET)
+find_package(Libnghttp2 QUIET)
 
 function(install_windows_deps)
   # Bootstrap vcpkg from CMake and auto-install deps in case if we are missing
@@ -743,6 +751,9 @@ if(WITH_OPENTRACING)
   add_subdirectory(opentracing-shim)
 endif()
 
+include(cmake/opentelemetry-build-external-component.cmake)
+include(cmake/patch-imported-config.cmake)
+
 if(NOT WITH_API_ONLY)
   set(BUILD_TESTING ${BUILD_TESTING})
   include_directories(sdk/include)
@@ -764,9 +775,6 @@ if(NOT WITH_API_ONLY)
   endif()
 endif()
 
-include(cmake/opentelemetry-build-external-component.cmake)
-include(cmake/patch-imported-config.cmake)
-
 if(OPENTELEMETRY_INSTALL)
   # Export cmake config and support find_packages(opentelemetry-cpp CONFIG)
   # Write config file for find_packages(opentelemetry-cpp CONFIG)
diff --git a/api/include/opentelemetry/nostd/type_traits.h b/api/include/opentelemetry/nostd/type_traits.h
index 5a08707..3b4b584 100644
--- a/api/include/opentelemetry/nostd/type_traits.h
+++ b/api/include/opentelemetry/nostd/type_traits.h
@@ -17,6 +17,7 @@
 #  include "opentelemetry/config.h"
 #  include "opentelemetry/nostd/detail/void.h"  // IWYU pragma: export
 #  include "opentelemetry/version.h"
+#endif
 
 OPENTELEMETRY_BEGIN_NAMESPACE
 namespace nostd
@@ -70,6 +71,10 @@ struct remove_all_extents<std::array<T, N>> : remove_all_extents<T>
 template <typename T>
 using remove_all_extents_t = typename remove_all_extents<T>::type;
 
+#if defined(OPENTELEMETRY_STL_VERSION) && OPENTELEMETRY_STL_VERSION >= 2017
+using std::is_swappable;
+using std::is_nothrow_swappable;
+#else
 /**
  * Back port of std::is_swappable
  */
@@ -119,6 +124,7 @@ struct is_nothrow_swappable<false, T> : std::false_type
 }  // namespace detail
 template <typename T>
 using is_nothrow_swappable = detail::swappable::is_nothrow_swappable<is_swappable<T>::value, T>;
+#endif
 
 /**
  * Back port of
@@ -159,4 +165,3 @@ struct is_trivially_move_assignable
 #  endif
 }  // namespace nostd
 OPENTELEMETRY_END_NAMESPACE
-#endif /* OPENTELEMETRY_HAVE_STD_TYPE_TRAITS */
diff --git a/api/include/opentelemetry/std/type_traits.h b/api/include/opentelemetry/std/type_traits.h
index 074f796..ba14602 100644
--- a/api/include/opentelemetry/std/type_traits.h
+++ b/api/include/opentelemetry/std/type_traits.h
@@ -8,15 +8,3 @@
 #include <type_traits>
 
 #include "opentelemetry/version.h"
-
-OPENTELEMETRY_BEGIN_NAMESPACE
-// Standard Type aliases in nostd namespace
-namespace nostd
-{
-
-// nostd::enable_if_t<...>
-template <bool B, class T = void>
-using enable_if_t = typename std::enable_if<B, T>::type;
-
-}  // namespace nostd
-OPENTELEMETRY_END_NAMESPACE
diff --git a/ext/src/http/client/curl/http_client_curl.cc b/ext/src/http/client/curl/http_client_curl.cc
index a65410d..add120c 100644
--- a/ext/src/http/client/curl/http_client_curl.cc
+++ b/ext/src/http/client/curl/http_client_curl.cc
@@ -26,6 +26,7 @@
 #include "opentelemetry/ext/http/common/url_parser.h"
 #include "opentelemetry/nostd/shared_ptr.h"
 #include "opentelemetry/nostd/string_view.h"
+#include "opentelemetry/nostd/type_traits.h"
 #include "opentelemetry/sdk/common/thread_instrumentation.h"
 #include "opentelemetry/version.h"
 
@@ -116,7 +117,7 @@ int deflateInPlace(z_stream *strm, unsigned char *buf, uint32_t len, uint32_t *m
   // now empty input buffer (this will only occur for long incompressible streams, more than ~20 MB
   // for the default deflate memLevel of 8, or when *max_len is too small and less than the length
   // of the header plus one byte)
-  auto hold = static_cast<std::remove_const_t<decltype(z_stream::next_in)>>(
+  auto hold = static_cast<nostd::remove_const_t<decltype(z_stream::next_in)>>(
       strm->zalloc(strm->opaque, strm->avail_in, 1));  // allocated buffer to hold input data
   if (hold == Z_NULL)
   {
