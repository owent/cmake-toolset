diff --git a/cmake/compilers/Clang.cmake b/cmake/compilers/Clang.cmake
index f56b5fb..6beb134 100644
--- a/cmake/compilers/Clang.cmake
+++ b/cmake/compilers/Clang.cmake
@@ -59,7 +59,7 @@ if (CMAKE_SYSTEM_PROCESSOR MATCHES "(AMD64|amd64|i.86|x86)" AND NOT EMSCRIPTEN)
 endif()
 
 # Clang flags to prevent compiler from optimizing out security checks
-set(TBB_COMMON_COMPILE_FLAGS ${TBB_COMMON_COMPILE_FLAGS} -Wformat -Wformat-security -Werror=format-security -fPIC $<$<NOT:$<BOOL:${EMSCRIPTEN}>>:-fstack-protector-strong>)
+set(TBB_COMMON_COMPILE_FLAGS ${TBB_COMMON_COMPILE_FLAGS} -Wformat -Wformat-security -Werror=format-security -fPIC)
 
 # -z switch is not supported on MacOS
 if (NOT APPLE)
diff --git a/cmake/compilers/GNU.cmake b/cmake/compilers/GNU.cmake
index 6fd8d98..8f9fc76 100644
--- a/cmake/compilers/GNU.cmake
+++ b/cmake/compilers/GNU.cmake
@@ -70,7 +70,7 @@ endif ()
 # Gnu flags to prevent compiler from optimizing out security checks
 set(TBB_COMMON_COMPILE_FLAGS ${TBB_COMMON_COMPILE_FLAGS} -fno-strict-overflow -fno-delete-null-pointer-checks -fwrapv)
 set(TBB_COMMON_COMPILE_FLAGS ${TBB_COMMON_COMPILE_FLAGS} -Wformat -Wformat-security -Werror=format-security
-    -fstack-protector-strong )
+    )
 # -z switch is not supported on MacOS and MinGW
 if (NOT APPLE AND NOT MINGW)
     set(TBB_LIB_LINK_FLAGS ${TBB_LIB_LINK_FLAGS} -Wl,-z,relro,-z,now,-z,noexecstack)
diff --git a/src/tbb/threading_control.cpp b/src/tbb/threading_control.cpp
index 1ca1837..3e62017 100644
--- a/src/tbb/threading_control.cpp
+++ b/src/tbb/threading_control.cpp
@@ -65,7 +65,8 @@ cache_aligned_unique_ptr<permit_manager> threading_control_impl::make_permit_man
      if (tcm_adaptor::is_initialized()) {
         auto tcm = make_cache_aligned_unique<tcm_adaptor>();
         if (tcm->is_connected()) {
-            return tcm;
+           // Patch for GCC 4.8
+           return cache_aligned_unique_ptr<permit_manager>{std::move(tcm)};
         }
     }
     return make_cache_aligned_unique<market>(workers_soft_limit);
@@ -85,7 +86,8 @@ cache_aligned_unique_ptr<thread_dispatcher> threading_control_impl::make_thread_
             td->my_server->default_concurrency(), workers_soft_limit);
     }
 
-    return td;
+    // Patch for GCC 4.8
+    return cache_aligned_unique_ptr<thread_dispatcher>{std::move(td)};
 }
 
 threading_control_impl::threading_control_impl(threading_control* tc) {
