diff --git a/CMakeLists.txt b/CMakeLists.txt
index 580cc4357..50b0c27c5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -469,6 +469,7 @@ if(use_core_foundation_and_core_services)
 endif()
 
 if(CURL_USE_OPENSSL)
+  find_package(Threads)
   find_package(OpenSSL REQUIRED)
   set(SSL_ENABLED ON)
   set(USE_OPENSSL ON)
@@ -502,9 +503,17 @@ if(CURL_USE_MBEDTLS)
   find_package(MbedTLS REQUIRED)
   set(SSL_ENABLED ON)
   set(USE_MBEDTLS ON)
+  if(TARGET MbedTLS::mbedtls)
+  list(APPEND CURL_LIBS MbedTLS::mbedtls)
+  elseif(TARGET mbedtls_static)
+  list(APPEND CURL_LIBS mbedtls_static)
+  elseif(TARGET mbedtls)
+  list(APPEND CURL_LIBS mbedtls)
+  else()
   list(APPEND CURL_LIBS ${MBEDTLS_LIBRARIES})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "mbedtls")
   include_directories(${MBEDTLS_INCLUDE_DIRS})
+  endif()
 
   if(CURL_DEFAULT_SSL_BACKEND AND CURL_DEFAULT_SSL_BACKEND STREQUAL "mbedtls")
     set(valid_default_ssl_backend TRUE)
@@ -608,9 +617,20 @@ if(CURL_ZSTD)
   find_package(Zstd REQUIRED)
   if(Zstd_FOUND AND NOT Zstd_VERSION VERSION_LESS "1.0.0")
     set(HAVE_ZSTD ON)
+    if(TARGET zstd::libzstd_shared)
+      set(HAVE_ZSTD ON)
+      list(APPEND CURL_LIBS zstd::libzstd_shared)
+    elseif(TARGET zstd::libzstd_static)
+      set(HAVE_ZSTD ON)
+      list(APPEND CURL_LIBS zstd::libzstd_static)
+    elseif(TARGET zstd::libzstd)
+      set(HAVE_ZSTD ON)
+      list(APPEND CURL_LIBS zstd::libzstd)
+    else()
     list(APPEND CURL_LIBS ${Zstd_LIBRARIES})
     list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "libzstd")
     include_directories(${Zstd_INCLUDE_DIRS})
+    endif()
   else()
     message(WARNING "zstd v1.0.0 or newer is required, disabling zstd support.")
   endif()
@@ -625,6 +645,12 @@ macro(openssl_check_symbol_exists SYMBOL FILES VARIABLE EXTRA_LIBS)
     if(HAVE_LIBZ)
       list(APPEND CMAKE_REQUIRED_LIBRARIES "${ZLIB_LIBRARIES}")
     endif()
+    if(CMAKE_DL_LIBS)
+      list(APPEND CMAKE_REQUIRED_LIBRARIES ${CMAKE_DL_LIBS})
+    endif()
+    if(TARGET Threads::Threads)
+      list(APPEND CMAKE_REQUIRED_LIBRARIES Threads::Threads)
+    endif()
     if(WIN32)
       list(APPEND CMAKE_REQUIRED_LIBRARIES "ws2_32")
       list(APPEND CMAKE_REQUIRED_LIBRARIES "bcrypt")  # for OpenSSL/LibreSSL
@@ -700,12 +726,37 @@ if(USE_ECH)
   endif()
 endif()
 
-option(USE_NGHTTP2 "Use nghttp2 library" OFF)
+option(USE_NGHTTP2 "Use Nghttp2 library" OFF)
 if(USE_NGHTTP2)
   find_package(NGHTTP2 REQUIRED)
   include_directories(${NGHTTP2_INCLUDE_DIRS})
   list(APPEND CURL_LIBS ${NGHTTP2_LIBRARIES})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "libnghttp2")
+  if(WIN32)
+    cmake_push_check_state()
+    set(CMAKE_REQUIRED_LIBRARIES "${CURL_LIBS}")
+    check_type_size(ssize_t SIZEOF_SSIZE_T)
+    if(NOT HAVE_SIZEOF_SSIZE_T)
+      check_type_size("long" SIZEOF_LONG)
+      check_type_size("__int64" SIZEOF___INT64)
+      if(SIZEOF_LONG EQUAL SIZEOF_SIZE_T)
+        set(CMAKE_REQUIRED_DEFINITIONS "-Dssize_t=long")
+      elseif(SIZEOF___INT64 EQUAL SIZEOF_SIZE_T)
+        set(CMAKE_REQUIRED_DEFINITIONS "-Dssize_t=__int64")
+      else()
+        set(CMAKE_REQUIRED_DEFINITIONS "-Dssize_t=long long")
+      endif()
+    endif()
+    check_symbol_exists(nghttp2_version "nghttp2/nghttp2.h" HAVE_NGHTTP2_DYNAMICLIB)
+    if(NOT HAVE_NGHTTP2_DYNAMICLIB)
+      list(APPEND CMAKE_REQUIRED_DEFINITIONS "-DNGHTTP2_STATICLIB=1")
+      check_symbol_exists(nghttp2_version "nghttp2/nghttp2.h" HAVE_NGHTTP2_STATICLIB)
+      if(HAVE_NGHTTP2_STATICLIB)
+        add_definitions(-DNGHTTP2_STATICLIB=1)
+      endif()
+    endif()
+    cmake_pop_check_state()
+  endif()
 endif()
 
 option(USE_NGTCP2 "Use ngtcp2 and nghttp3 libraries for HTTP/3 support" OFF)
@@ -738,6 +789,27 @@ if(USE_NGTCP2)
   include_directories(${NGHTTP3_INCLUDE_DIRS})
   list(APPEND CURL_LIBS ${NGHTTP3_LIBRARIES})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "libnghttp3")
+
+  cmake_push_check_state()
+  set(CMAKE_REQUIRED_LIBRARIES "${CURL_LIBS}")
+  check_symbol_exists(nghttp3_version "nghttp3/nghttp3.h" HAVE_NGHTTP3_DYNAMICLIB)
+  if(NOT HAVE_NGHTTP3_DYNAMICLIB)
+    set(CMAKE_REQUIRED_DEFINITIONS "-DNGHTTP3_STATICLIB=1")
+    check_symbol_exists(nghttp3_version "nghttp3/nghttp3.h" HAVE_NGHTTP3_STATICLIB)
+    if(HAVE_NGHTTP3_STATICLIB)
+      add_definitions(-DNGHTTP3_STATICLIB=1)
+    endif()
+  endif()
+
+  check_symbol_exists(ngtcp2_version "ngtcp2/ngtcp2.h" HAVE_NGTCP2_DYNAMICLIB)
+  if(NOT HAVE_NGTCP2_DYNAMICLIB)
+    set(CMAKE_REQUIRED_DEFINITIONS "-DNGTCP2_STATICLIB=1")
+    check_symbol_exists(ngtcp2_version "ngtcp2/ngtcp2.h" HAVE_NGTCP2_STATICLIB)
+    if(HAVE_NGTCP2_STATICLIB)
+      add_definitions(-DNGTCP2_STATICLIB=1)
+    endif()
+  endif()
+  cmake_pop_check_state()
 endif()
 
 option(USE_QUICHE "Use quiche library for HTTP/3 support" OFF)
@@ -819,7 +891,7 @@ if(NOT CURL_DISABLE_LDAP)
   # Now that we know, we're not using windows LDAP...
   if(NOT USE_WIN32_LDAP)
     # Check for LDAP
-    set(CMAKE_REQUIRED_LIBRARIES ${OPENSSL_LIBRARIES})
+    set(CMAKE_REQUIRED_LIBRARIES "${OPENSSL_LIBRARIES}")
     check_library_exists("${CMAKE_LDAP_LIB}" "ldap_init" "" HAVE_LIBLDAP)
     if(HAVE_LIBLDAP)
       check_library_exists("${CMAKE_LDAP_LIB};${CMAKE_LBER_LIB}" "ber_init" "" HAVE_LIBLBER)
