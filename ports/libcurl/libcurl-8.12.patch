diff --git a/CMakeLists.txt b/CMakeLists.txt
index 30c0154..25294a7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -733,6 +733,7 @@ if(_use_core_foundation_and_core_services)
 endif()
 
 if(CURL_USE_OPENSSL)
+  find_package(Threads)
   find_package(OpenSSL REQUIRED)
   set(_ssl_enabled ON)
   set(USE_OPENSSL ON)
@@ -787,6 +788,13 @@ if(CURL_USE_MBEDTLS)
   find_package(MbedTLS REQUIRED)
   set(_ssl_enabled ON)
   set(USE_MBEDTLS ON)
+  if(TARGET MbedTLS::mbedtls)
+  list(APPEND CURL_LIBS MbedTLS::mbedtls)
+  elseif(TARGET mbedtls_static)
+  list(APPEND CURL_LIBS mbedtls_static)
+  elseif(TARGET mbedtls)
+  list(APPEND CURL_LIBS mbedtls)
+  else()
   list(APPEND CURL_LIBS ${MBEDTLS_LIBRARIES})
   list(APPEND CURL_LIBDIRS ${MBEDTLS_LIBRARY_DIRS})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${MBEDTLS_PC_REQUIRES})
@@ -795,6 +803,7 @@ if(CURL_USE_MBEDTLS)
   if(MBEDTLS_CFLAGS)
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MBEDTLS_CFLAGS}")
   endif()
+  endif()
 
   if(CURL_DEFAULT_SSL_BACKEND AND CURL_DEFAULT_SSL_BACKEND STREQUAL "mbedtls")
     set(_valid_default_ssl_backend TRUE)
@@ -928,6 +937,16 @@ curl_dependency_option(CURL_ZSTD Zstd "zstd")
 if(ZSTD_FOUND)
   if(NOT ZSTD_VERSION VERSION_LESS 1.0.0)
     set(HAVE_ZSTD ON)
+    if(TARGET zstd::libzstd_shared)
+      set(HAVE_ZSTD ON)
+      list(APPEND CURL_LIBS zstd::libzstd_shared)
+    elseif(TARGET zstd::libzstd_static)
+      set(HAVE_ZSTD ON)
+      list(APPEND CURL_LIBS zstd::libzstd_static)
+    elseif(TARGET zstd::libzstd)
+      set(HAVE_ZSTD ON)
+      list(APPEND CURL_LIBS zstd::libzstd)
+    else()
     list(APPEND CURL_LIBS ${ZSTD_LIBRARIES})
     list(APPEND CURL_LIBDIRS ${ZSTD_LIBRARY_DIRS})
     list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${ZSTD_PC_REQUIRES})
@@ -936,6 +955,7 @@ if(ZSTD_FOUND)
     if(ZSTD_CFLAGS)
       set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${ZSTD_CFLAGS}")
     endif()
+    endif()
   else()
     message(WARNING "zstd v1.0.0 or newer is required, disabling zstd support.")
   endif()
@@ -950,6 +970,12 @@ macro(curl_openssl_check_symbol_exists _symbol _files _variable)
     if(HAVE_LIBZ)
       list(APPEND CMAKE_REQUIRED_LIBRARIES "${ZLIB_LIBRARIES}")
     endif()
+    if(CMAKE_DL_LIBS)
+      list(APPEND CMAKE_REQUIRED_LIBRARIES ${CMAKE_DL_LIBS})
+    endif()
+    if(TARGET Threads::Threads)
+      list(APPEND CMAKE_REQUIRED_LIBRARIES Threads::Threads)
+    endif()
     if(WIN32)
       list(APPEND CMAKE_REQUIRED_LIBRARIES "ws2_32")
       list(APPEND CMAKE_REQUIRED_LIBRARIES "bcrypt")  # for OpenSSL/LibreSSL
@@ -1055,6 +1081,31 @@ if(USE_NGHTTP2)
     if(NGHTTP2_CFLAGS)
       set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NGHTTP2_CFLAGS}")
     endif()
+    if(WIN32)
+      cmake_push_check_state()
+      set(CMAKE_REQUIRED_LIBRARIES "${CURL_LIBS}")
+      check_type_size(ssize_t SIZEOF_SSIZE_T)
+      if(NOT HAVE_SIZEOF_SSIZE_T)
+        check_type_size("long" SIZEOF_LONG)
+        check_type_size("__int64" SIZEOF___INT64)
+        if(SIZEOF_LONG EQUAL SIZEOF_SIZE_T)
+          set(CMAKE_REQUIRED_DEFINITIONS "-Dssize_t=long")
+        elseif(SIZEOF___INT64 EQUAL SIZEOF_SIZE_T)
+          set(CMAKE_REQUIRED_DEFINITIONS "-Dssize_t=__int64")
+        else()
+          set(CMAKE_REQUIRED_DEFINITIONS "-Dssize_t=long long")
+        endif()
+      endif()
+      check_symbol_exists(nghttp2_version "nghttp2/nghttp2.h" HAVE_NGHTTP2_DYNAMICLIB)
+      if(NOT HAVE_NGHTTP2_DYNAMICLIB)
+        list(APPEND CMAKE_REQUIRED_DEFINITIONS "-DNGHTTP2_STATICLIB=1")
+        check_symbol_exists(nghttp2_version "nghttp2/nghttp2.h" HAVE_NGHTTP2_STATICLIB)
+        if(HAVE_NGHTTP2_STATICLIB)
+          add_definitions(-DNGHTTP2_STATICLIB=1)
+        endif()
+      endif()
+      cmake_pop_check_state()
+    endif()
   else()
     set(USE_NGHTTP2 OFF)
   endif()
@@ -1090,6 +1141,13 @@ if(USE_NGTCP2)
 
   find_package(NGHTTP3 REQUIRED)
   set(USE_NGHTTP3 ON)
+  if(TARGET nghttp3::nghttp3)
+    list(APPEND CURL_LIBS nghttp3::nghttp3)
+    list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "libnghttp3")
+  elseif(TARGET nghttp3::nghttp3_static)
+    list(APPEND CURL_LIBS nghttp3::nghttp3_static)
+    list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "libnghttp3_static")
+  else()
   list(APPEND CURL_LIBS ${NGHTTP3_LIBRARIES})
   list(APPEND CURL_LIBDIRS ${NGHTTP3_LIBRARY_DIRS})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${NGHTTP3_PC_REQUIRES})
@@ -1098,6 +1156,27 @@ if(USE_NGTCP2)
   if(NGHTTP3_CFLAGS)
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NGHTTP3_CFLAGS}")
   endif()
+
+    cmake_push_check_state()
+    set(CMAKE_REQUIRED_LIBRARIES "${CURL_LIBS}")
+    check_symbol_exists(nghttp3_version "nghttp3/nghttp3.h" HAVE_NGHTTP3_DYNAMICLIB)
+    if(NOT HAVE_NGHTTP3_DYNAMICLIB)
+      set(CMAKE_REQUIRED_DEFINITIONS "-DNGHTTP3_STATICLIB=1")
+      check_symbol_exists(nghttp3_version "nghttp3/nghttp3.h" HAVE_NGHTTP3_STATICLIB)
+      if(HAVE_NGHTTP3_STATICLIB)
+        add_definitions(-DNGHTTP3_STATICLIB=1)
+      endif()
+    endif()
+    check_symbol_exists(ngtcp2_version "ngtcp2/ngtcp2.h" HAVE_NGTCP2_DYNAMICLIB)
+    if(NOT HAVE_NGTCP2_DYNAMICLIB)
+      set(CMAKE_REQUIRED_DEFINITIONS "-DNGTCP2_STATICLIB=1")
+      check_symbol_exists(ngtcp2_version "ngtcp2/ngtcp2.h" HAVE_NGTCP2_STATICLIB)
+      if(HAVE_NGTCP2_STATICLIB)
+        add_definitions(-DNGTCP2_STATICLIB=1)
+      endif()
+    endif()
+    cmake_pop_check_state()
+  endif()
 endif()
 
 option(USE_QUICHE "Use quiche library for HTTP/3 support" OFF)
@@ -1157,9 +1236,38 @@ if(USE_OPENSSL_QUIC)
 
   find_package(NGHTTP3 REQUIRED)
   set(USE_NGHTTP3 ON)
+  if(TARGET nghttp3::nghttp3)
+    list(APPEND CURL_LIBS nghttp3::nghttp3)
+    list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "libnghttp3")
+  elseif(TARGET nghttp3::nghttp3_static)
+    list(APPEND CURL_LIBS nghttp3::nghttp3_static)
+    list(APPEND LIBCURL_PC_REQUIRES_PRIVATE "libnghttp3_static")
+  else()
   include_directories(SYSTEM ${NGHTTP3_INCLUDE_DIRS})
   list(APPEND CURL_LIBS ${NGHTTP3_LIBRARIES})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${NGHTTP3_PC_REQUIRES})
+
+    cmake_push_check_state()
+    set(CMAKE_REQUIRED_LIBRARIES "${CURL_LIBS}")
+    check_symbol_exists(nghttp3_version "nghttp3/nghttp3.h" HAVE_NGHTTP3_DYNAMICLIB)
+    if(NOT HAVE_NGHTTP3_DYNAMICLIB)
+      set(CMAKE_REQUIRED_DEFINITIONS "-DNGHTTP3_STATICLIB=1")
+      check_symbol_exists(nghttp3_version "nghttp3/nghttp3.h" HAVE_NGHTTP3_STATICLIB)
+      if(HAVE_NGHTTP3_STATICLIB)
+        add_definitions(-DNGHTTP3_STATICLIB=1)
+      endif()
+    endif()
+  
+    check_symbol_exists(ngtcp2_version "ngtcp2/ngtcp2.h" HAVE_NGTCP2_DYNAMICLIB)
+    if(NOT HAVE_NGTCP2_DYNAMICLIB)
+      set(CMAKE_REQUIRED_DEFINITIONS "-DNGTCP2_STATICLIB=1")
+      check_symbol_exists(ngtcp2_version "ngtcp2/ngtcp2.h" HAVE_NGTCP2_STATICLIB)
+      if(HAVE_NGTCP2_STATICLIB)
+        add_definitions(-DNGTCP2_STATICLIB=1)
+      endif()
+    endif()
+    cmake_pop_check_state()
+  endif()
 endif()
 
 if(CURL_WITH_MULTI_SSL AND (USE_NGTCP2 OR USE_QUICHE OR USE_MSH3 OR USE_OPENSSL_QUIC))
@@ -1186,7 +1294,7 @@ if(NOT CURL_DISABLE_LDAP)
     # Check for LDAP
     cmake_push_check_state()
     if(USE_OPENSSL)
-      list(APPEND CMAKE_REQUIRED_LIBRARIES ${OPENSSL_LIBRARIES})
+      list(APPEND CMAKE_REQUIRED_LIBRARIES "${OPENSSL_LIBRARIES}")
     endif()
     find_package(LDAP)
     if(LDAP_FOUND)
