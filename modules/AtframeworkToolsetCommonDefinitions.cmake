#[===[.md:
# Just like https://github.com/microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_common_definitions.cmake but add some additional system libraries.

These variables will influence the behavior of the toolchain:

```cmake
ATFRAMEWORK_CMAKE_TOOLSET_ADDITIONAL_SYSTEM_LIBRARIES        list of additional system libraries that users can add to the toolchain
```

This file defines the following variables which are commonly needed or used in portfiles:

```cmake
ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_<target>                 with <target> being one of the following: WINDOWS, UWP, LINUX, OSX, ANDROID, FREEBSD, OPENBSD. only defined if <target>
ATFRAMEWORK_CMAKE_TOOLSET_HOST_IS_<target>                   with <host> being one of the following: WINDOWS, LINUX, OSX, FREEBSD, OPENBSD. only defined if <host>
ATFRAMEWORK_CMAKE_TOOLSET_HOST_PATH_SEPARATOR                Host specific path separator (USAGE: "<something>${ATFRAMEWORK_CMAKE_TOOLSET_HOST_PATH_SEPARATOR}<something>"; only use and pass variables with ATFRAMEWORK_CMAKE_TOOLSET_HOST_PATH_SEPARATOR within "")
ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES                   list of libraries are provide by the toolchain and are not managed by vcpkg
```

CMAKE_STATIC_LIBRARY_(PREFIX|SUFFIX), CMAKE_SHARED_LIBRARY_(PREFIX|SUFFIX) and CMAKE_IMPORT_LIBRARY_(PREFIX|SUFFIX) are defined for the target
Furthermore the variables CMAKE_FIND_LIBRARY_(PREFIXES|SUFFIXES) are also defined for the target so that
portfiles are able to use find_library calls to discover dependent libraries within the current triplet for ports.
#]===]

include_guard(GLOBAL)

# Helper variable to identify the Target system. ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_<targetname>.
include(CMakePushCheckState)

# Crossing compiling must be check first
if(ANDROID OR CMAKE_SYSTEM_NAME STREQUAL "Android")
  set(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_ANDROID ON)
elseif(CMAKE_SYSTEM_NAME STREQUAL "iOS")
  set(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_IOS ON)
elseif(DEFINED VCPKG_CMAKE_SYSTEM_NAME AND VCPKG_CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
  set(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_WINDOWS ON)
  set(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_UWP ON)
elseif(MINGW OR CMAKE_SYSTEM_NAME STREQUAL "MinGW")
  set(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_WINDOWS ON)
  set(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_MINGW ON)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  set(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_WINDOWS ON)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  set(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_OSX ON)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  set(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_LINUX ON)
elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
  set(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_FREEBSD ON)
elseif(CMAKE_SYSTEM_NAME STREQUAL "OpenBSD")
  set(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_OPENBSD ON)
endif()

# Helper variables to identify the host system name
if(CMAKE_HOST_WIN32)
  set(ATFRAMEWORK_CMAKE_TOOLSET_HOST_IS_WINDOWS ON)
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin")
  set(ATFRAMEWORK_CMAKE_TOOLSET_HOST_IS_OSX ON)
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
  set(ATFRAMEWORK_CMAKE_TOOLSET_HOST_IS_LINUX ON)
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "FreeBSD")
  set(ATFRAMEWORK_CMAKE_TOOLSET_HOST_IS_FREEBSD ON)
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "OpenBSD")
  set(ATFRAMEWORK_CMAKE_TOOLSET_HOST_IS_OPENBSD ON)
endif()

# Helper variable to identify the host path separator.
if(CMAKE_HOST_WIN32)
  set(ATFRAMEWORK_CMAKE_TOOLSET_HOST_PATH_SEPARATOR ";")
elseif(CMAKE_HOST_UNIX)
  set(ATFRAMEWORK_CMAKE_TOOLSET_HOST_PATH_SEPARATOR ":")
endif()

# Append platform libraries to ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES The variable are just appended to permit to
# custom triplets define the variable

if(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_ANDROID)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES "log" "c")
endif()

if(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_LINUX
   OR ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_FREEBSD
   OR ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_OPENBSD
   OR ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_OSX
   OR ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_MINGW
   OR ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_IOS
   OR ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_ANDROID)
  cmake_push_check_state()
  set(ATFRAMEWORK_CMAKE_TOOLSET_TEST_SYSTEM_LIBRARIES gcc_s m dl pthread rt gcc)
  include(CheckCXXSourceCompiles)

  # Check libraries
  foreach(LIBNAME IN LISTS ATFRAMEWORK_CMAKE_TOOLSET_TEST_SYSTEM_LIBRARIES)
    cmake_push_check_state()
    if(CMAKE_REQUIRED_LIBRARIES)
      set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};${LIBNAME}")
    else()
      set(CMAKE_REQUIRED_LIBRARIES "${LIBNAME}")
    endif()
    if(ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES)
      list(APPEND CMAKE_REQUIRED_LIBRARIES ${ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES})
    endif()
    string(TOUPPER "${LIBNAME}" ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME)
    set(ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME
        "ATFRAMEWORK_CMAKE_TOOLSET_TEST_LINK_${ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME}")
    check_cxx_source_compiles("#include <cstdio>
    int main() { return 0; }" ${ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME})
    if(${ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME})
      list(PREPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES "${LIBNAME}")
    endif()
    cmake_pop_check_state()
  endforeach()

  # Check special flags
  cmake_push_check_state()
  if(CMAKE_REQUIRED_FLAGS)
    set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS};-pthread")
  else()
    set(CMAKE_REQUIRED_FLAGS "-pthread")
  endif()
  check_cxx_source_compiles("int main() { return 0; }" ATFRAMEWORK_CMAKE_TOOLSET_TEST_FLAG_PTHREAD)
  cmake_pop_check_state()

  unset(ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME)
  cmake_pop_check_state()
endif()

# Platforms with system iconv
if(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_OSX OR ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_IOS)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES iconv)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES resolv)
endif()

# Windows system libs
if(ATFRAMEWORK_CMAKE_TOOLSET_TARGET_IS_WINDOWS)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES advapi32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES bcrypt)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES dinput8)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES gdi32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES imm32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES oleaut32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES ole32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES iphlpapi)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES psapi)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES secur32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES setupapi)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES shell32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES shlwapi)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES strmiids)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES user32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES uuid)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES version)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES vfw32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES winmm)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES wsock32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES userenv)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES Ws2_32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES wldap32)
  list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES crypt32)
endif()

# Custom additional system libraries
function(cmake_toolset_check_library_exists LIBNAME OUT_VAR_NAME)
  if(LIBNAME IN_LIST ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LINKS)
    set(${OUT_VAR_NAME}
        TRUE
        PARENT_SCOPE)
    return()
  endif()

  string(TOUPPER "ATFRAMEWORK_CMAKE_TOOLSET_TEST_LINK_${LIBNAME}" ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME)
  if(DEFINED CACHE{${ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME}})
    set(${OUT_VAR_NAME}
        ${${ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME}}
        PARENT_SCOPE)
    return()
  endif()

  unset(${ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME})
  include(CheckCXXSourceCompiles)

  cmake_push_check_state()
  if(CMAKE_REQUIRED_LIBRARIES)
    set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};${LIBNAME}")
  else()
    set(CMAKE_REQUIRED_LIBRARIES "${LIBNAME}")
  endif()
  if(ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES)
    list(APPEND CMAKE_REQUIRED_LIBRARIES ${ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES})
  endif()

  check_cxx_source_compiles("#include <cstdio>
  int main() { return 0; }" ${ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME})

  set(${ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME}
      ${${ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME}}
      CACHE BOOL "If the library ${LIBNAME} is available" FORCE)
  mark_as_advanced(${ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME})

  set(${OUT_VAR_NAME}
      ${${ATFRAMEWORK_CMAKE_TOOLSET_TEST_NAME}}
      PARENT_SCOPE)
  cmake_pop_check_state()
endfunction()

if(ATFRAMEWORK_CMAKE_TOOLSET_ADDITIONAL_SYSTEM_LIBRARIES)
  include(CheckCXXSourceCompiles)

  # Check libraries
  foreach(LIBNAME IN LISTS ATFRAMEWORK_CMAKE_TOOLSET_ADDITIONAL_SYSTEM_LIBRARIES)
    if(LIBNAME IN_LIST ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LINKS)
      continue()
    endif()
    cmake_toolset_check_library_exists("${LIBNAME}" __check_additional_system_library_exists)
    if(__check_additional_system_library_exists)
      list(PREPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES "${LIBNAME}")
    endif()
  endforeach()
endif()

if(MSVC)
  foreach(LIBNAME IN LISTS ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES)
    list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LINKS "${LIBNAME}.lib")
  endforeach()
else()
  foreach(LIBNAME IN LISTS ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LIBRARIES)
    list(APPEND ATFRAMEWORK_CMAKE_TOOLSET_SYSTEM_LINKS "-l${LIBNAME}")
  endforeach()
endif()
